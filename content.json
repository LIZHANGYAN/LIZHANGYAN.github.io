{"meta":{"title":"starsea","subtitle":"lizhangyan","description":"","author":"lzy","url":"https://lizhangyan.github.io"},"pages":[{"title":"photos","date":"2017-12-11T07:46:40.000Z","updated":"2017-12-11T07:46:40.192Z","comments":true,"path":"photos/index.html","permalink":"https://lizhangyan.github.io/photos/index.html","excerpt":"","text":""}],"posts":[{"title":"Test","slug":"Test","date":"2017-12-11T02:42:22.000Z","updated":"2017-12-11T02:45:14.251Z","comments":true,"path":"2017/12/11/Test/","link":"","permalink":"https://lizhangyan.github.io/2017/12/11/Test/","excerpt":"","text":"Test HexoLIZHANGYAN","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-12-11T02:34:06.387Z","updated":"2017-12-11T02:34:06.387Z","comments":true,"path":"2017/12/11/hello-world/","link":"","permalink":"https://lizhangyan.github.io/2017/12/11/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"[原]VPS+Shadowsocks+Ubuntu+Chrome","slug":"原-VPS-Shadowsocks-Ubuntu-Chrome","date":"2017-10-18T11:42:35.000Z","updated":"2017-12-11T02:57:37.904Z","comments":true,"path":"2017/10/18/原-VPS-Shadowsocks-Ubuntu-Chrome/","link":"","permalink":"https://lizhangyan.github.io/2017/10/18/原-VPS-Shadowsocks-Ubuntu-Chrome/","excerpt":"","text":"待办&lt;div&gt; 作者：u012610276 发表于2017/10/18 19:42:35 [原文链接](http://blog.csdn.net/lzylizhangyan/article/details/78276815) &lt;/div&gt; &lt;div&gt; 阅读：35 评论：0 [查看评论](http://blog.csdn.net/lzylizhangyan/article/details/78276815#comments) &lt;/div&gt;","categories":[],"tags":[]},{"title":"[原]人脸识别中的rank-n 代表的意思","slug":"原-人脸识别中的rank-n-代表的意思","date":"2017-09-02T03:05:13.000Z","updated":"2017-12-11T02:57:37.904Z","comments":true,"path":"2017/09/02/原-人脸识别中的rank-n-代表的意思/","link":"","permalink":"https://lizhangyan.github.io/2017/09/02/原-人脸识别中的rank-n-代表的意思/","excerpt":"","text":"Rank-1看一些论文总是在结果中看到rank-1，等等，但是就不知道什么意思，今天终于搞明白了，备注一下。 意思rank 1， 就是第一次命中 rank k，就是在第k次以内命中 人脸识别中，就代表，与目标人脸，最相似的k个人脸中，成功命中（找到正确人脸）的概率（和）。 RANK曲线，一般又被称呼为CMC曲线。 &lt;div&gt; 作者：u012610276 发表于2017/9/2 11:05:13 [原文链接](http://blog.csdn.net/lzylizhangyan/article/details/77799871) &lt;/div&gt; &lt;div&gt; 阅读：178 评论：0 [查看评论](http://blog.csdn.net/lzylizhangyan/article/details/77799871#comments) &lt;/div&gt;","categories":[],"tags":[]},{"title":"[原]文章标题","slug":"原-文章标题","date":"2017-05-26T01:27:26.000Z","updated":"2017-12-11T02:57:37.904Z","comments":true,"path":"2017/05/26/原-文章标题/","link":"","permalink":"https://lizhangyan.github.io/2017/05/26/原-文章标题/","excerpt":"","text":"统计学习方法大部分内容总结自李航博士的统计学习方法 课件：统计学习方法课件 2.感知机Define:它是一个二分类的线性分类模型，其输入为实例的特征向量，输出为实例的类别，取{+1，-1}。 2.1感知机模型感知机是一个判别模型，所以它有自己的决策函数： f(x)=sign(w⋅x+b)f(x)=sign(w \\cdot x+b) 特征空间：χ⊆Rn,x⊆χ\\chi \\subseteq R^n, x \\subseteq \\chi 输出空间：y=+1,−1y={+1,-1} 权值：w⊆Rnw \\subseteq R^n 偏置：b⊆Rb \\subseteq R sign表示符号函数：sign(x)={+1,−1,x≥0x&lt;0sign(x)=\\begin{cases}+1,&amp;x\\geq0\\-1,&amp;x","categories":[],"tags":[]},{"title":"[原]统计学习方法笔记（一）","slug":"原-统计学习方法笔记（一）","date":"2017-05-24T02:45:28.000Z","updated":"2017-12-11T02:57:37.904Z","comments":true,"path":"2017/05/24/原-统计学习方法笔记（一）/","link":"","permalink":"https://lizhangyan.github.io/2017/05/24/原-统计学习方法笔记（一）/","excerpt":"","text":"统计学习方法大部分内容总结自李航博士的统计学习方法 课件：统计学习方法课件 第一章 统计学习方法概论&lt;div&gt; 作者：u012610276 发表于2017/5/24 10:45:28 [原文链接](http://blog.csdn.net/lzylizhangyan/article/details/72674218) &lt;/div&gt; &lt;div&gt; 阅读：76 评论：0 [查看评论](http://blog.csdn.net/lzylizhangyan/article/details/72674218#comments) &lt;/div&gt;","categories":[],"tags":[]},{"title":"[转]欢迎使用CSDN-markdown编辑器","slug":"转-欢迎使用CSDN-markdown编辑器","date":"2017-05-24T01:56:06.000Z","updated":"2017-12-11T02:57:37.904Z","comments":true,"path":"2017/05/24/转-欢迎使用CSDN-markdown编辑器/","link":"","permalink":"https://lizhangyan.github.io/2017/05/24/转-欢迎使用CSDN-markdown编辑器/","excerpt":"","text":"欢迎使用Markdown编辑器写博客本Markdown编辑器使用StackEdit修改而来，用它写博客，将会带来全新的体验哦： Markdown和扩展Markdown简洁的语法 代码块高亮 图片链接和图片上传 LaTex数学公式 UML序列图和流程图 离线写博客 导入导出Markdown文件 丰富的快捷键 快捷键 加粗 Ctrl + B 斜体 Ctrl + I 引用 Ctrl + Q 插入链接 Ctrl + L 插入代码 Ctrl + K 插入图片 Ctrl + G 提升标题 Ctrl + H 有序列表 Ctrl + O 无序列表 Ctrl + U 横线 Ctrl + R 撤销 Ctrl + Z 重做 Ctrl + Y Markdown及扩展 Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。 —— [ 维基百科 ] 使用简单的符号标识不同的标题，将某些文字标记为粗体或者斜体，创建一个链接等，详细语法参考帮助？。 本编辑器支持 Markdown Extra , 扩展了很多好用的功能。具体请参考Github. 表格Markdown Extra 表格语法： 项目 价格 Computer $1600 Phone $12 Pipe $1 可以使用冒号来定义对齐方式： 项目 价格 数量 Computer 1600 元 5 Phone 12 元 12 Pipe 1 元 234 定义列表Markdown Extra 定义列表语法：项目１项目２定义 A定义 B项目３定义 C定义 D&gt; 定义D内容 代码块代码块语法遵循标准markdown代码，例如： &lt;span class=&quot;hljs-decorator&quot;&gt;@requires_authorization&lt;/span&gt; &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;somefunc&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(param1=&lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&lt;/span&gt;, param2=&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;A docstring&apos;&apos;&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; param1 &amp;gt; param2: &lt;span class=&quot;hljs-comment&quot;&gt;# interesting&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&apos;Greater&apos;&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; (param2 - param1 + &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;hljs-keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;SomeClass&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;hljs-prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;message = &lt;span class=&quot;hljs-string&quot;&gt;&apos;&apos;&apos;interpreter &lt;span class=&quot;hljs-prompt&quot;&gt;... &lt;/span&gt;prompt&apos;&apos;&apos;&lt;/span&gt; 脚注生成一个脚注1. 目录用 [TOC]来生成目录： 欢迎使用Markdown编辑器写博客 快捷键 Markdown及扩展 表格 定义列表 代码块 脚注 目录 数学公式 UML 图 离线写博客 浏览器兼容 数学公式使用MathJax渲染LaTex 数学公式，详见math.stackexchange.com. 行内公式，数学公式为：Γ(n)=(n−1)!∀n∈N\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N。 块级公式： x=−b±b2−4ac−−−−−−−√2a x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} 更多LaTex语法请参考 这儿. UML 图:可以渲染序列图： Created with Raphaël 2.1.0张三张三李四李四嘿，小四儿, 写博客了没?李四愣了一下，说：忙得吐血，哪有时间写。 或者流程图： Created with Raphaël 2.1.0开始我的操作确认？结束yesno 关于 序列图 语法，参考 这儿, 关于 流程图 语法，参考 这儿. 离线写博客即使用户在没有网络的情况下，也可以通过本编辑器离线写博客（直接在曾经使用过的浏览器中输入write.blog.csdn.net/mdeditor即可。Markdown编辑器使用浏览器离线存储将内容保存在本地。 用户写博客的过程中，内容实时保存在浏览器缓存中，在用户关闭浏览器或者其它异常情况下，内容不会丢失。用户再次打开浏览器时，会显示上次用户正在编辑的没有发表的内容。 博客发表后，本地缓存将被删除。 用户可以选择 把正在写的博客保存到服务器草稿箱，即使换浏览器或者清除缓存，内容也不会丢失。 注意：虽然浏览器存储大部分时候都比较可靠，但为了您的数据安全，在联网后，请务必及时发表或者保存到服务器草稿箱。 浏览器兼容 目前，本编辑器对Chrome浏览器支持最为完整。建议大家使用较新版本的Chrome。 IE９以下不支持 IE９，１０，１１存在以下问题 1. 不支持离线功能 IE9不支持文件导入导出 IE10不支持拖拽文件导入 1. 这里是 *脚注 的 内容. ↩ 作者：u012610276 发表于2017/5/24 9:56:06 原文链接 阅读：122 评论：0 查看评论","categories":[],"tags":[]},{"title":"[原]JSP在Eclipse中调用.class","slug":"原-JSP在Eclipse中调用-class","date":"2014-11-01T13:17:47.000Z","updated":"2017-12-11T02:57:37.904Z","comments":true,"path":"2014/11/01/原-JSP在Eclipse中调用-class/","link":"","permalink":"https://lizhangyan.github.io/2014/11/01/原-JSP在Eclipse中调用-class/","excerpt":"","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这两天在学习Jsp，在调用.class的时候总是报错，最后才发现再写.Java时必须要用包名，然后再用&lt;%@ page import=&quot;test.TestBean&quot; %&gt;调用 &lt;div&gt; 作者：u012610276 发表于2014/11/1 21:17:47 [原文链接](http://blog.csdn.net/lzylizhangyan/article/details/40685169) &lt;/div&gt; &lt;div&gt; 阅读：281 评论：0 [查看评论](http://blog.csdn.net/lzylizhangyan/article/details/40685169#comments) &lt;/div&gt;","categories":[],"tags":[]},{"title":"[原]那个虐了我的杭电1000","slug":"原-那个虐了我的杭电1000","date":"2014-10-26T13:57:28.000Z","updated":"2017-12-11T02:57:37.904Z","comments":true,"path":"2014/10/26/原-那个虐了我的杭电1000/","link":"","permalink":"https://lizhangyan.github.io/2014/10/26/原-那个虐了我的杭电1000/","excerpt":"","text":"&#65279;&#65279; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 没有参加过ACM，做杭电上的题，只是为了复习数据结构，万万没想到刚开始就被打击了， &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 第1000题： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Problem Description&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Calculate A &#43; B.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Input&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Each line will contain two integers A and B. Process to end of file.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Output&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;For each case, output A &#43; B in one line.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sample Input&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 1 &nbsp;Sample Output&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 样例害人啊 &nbsp;&nbsp;&nbsp; 很丢人一开始竟然没看懂题意&nbsp;&nbsp;&nbsp; AC的代码如下 #include &lt;stdio.h&gt; int main() { int a,b,d=0; while(scanf(&quot;%d%d&quot;,&amp;a,&amp;b)!=EOF) { printf(&quot;%d\\n&quot;, a+b); } return 0; } &nbsp;&nbsp;&nbsp; 这个题的关键是“Process to end of file”这句话，处理到文件的结束，以前从没见过， 这里要先了解一下scanf()这个函数和EOF &nbsp;&nbsp; 1.scanf() scnaf()的函数原型：int scanf( const char *format, … );从这可以看出它返回一个整形，以第1000题为例&nbsp; “scanf(&quot;%d%d&quot;,&amp;a,&amp;b);&quot; 如果a和b都被成功读入，那么scanf的返回&#20540;就是2; 如果只有a被成功读入，返回&#20540;为1; 如果a和b都未被成功读入，返回&#20540;为0; 如果遇到错误或遇到end of file，返回&#20540;为EOF,即-1。 ACM中输入多组数据时用这种方式结束ctrl&#43;z &#65279;&#65279; &lt;div&gt; 作者：u012610276 发表于2014/10/26 21:57:28 [原文链接](http://blog.csdn.net/lzylizhangyan/article/details/40481619) &lt;/div&gt; &lt;div&gt; 阅读：338 评论：0 [查看评论](http://blog.csdn.net/lzylizhangyan/article/details/40481619#comments) &lt;/div&gt;","categories":[],"tags":[]},{"title":"[原]C#连接SQLServer","slug":"原-C-连接SQLServer","date":"2014-04-18T16:07:16.000Z","updated":"2017-12-11T02:57:37.904Z","comments":true,"path":"2014/04/19/原-C-连接SQLServer/","link":"","permalink":"https://lizhangyan.github.io/2014/04/19/原-C-连接SQLServer/","excerpt":"","text":"首先你的头文件里必须引用 using System.Data; using System.Data.SqlClient; 然后是连接数据库 SqlConnection con = new SqlConnection(&quot;Data Source=LZY; Initial Catalog=Student; Integrated Security=true&quot;) 其中Data Source后面给的是服务器名，我用的是本地数据库 Initial Catalog后面是数据库名； Integrated Secutity后面如果为“true”或者“SSPI”，表示指定windows 身份验证，如果为“false”，表示不指定Windows身份验证； 然后是打开数据库 con.Open(); MessageBox.Show(&quot;数据库&quot; + con.ServerVersion + con.State); ServerVersion好像是可以看你数据库的下图蓝色圈里的数字，不知道是什么东西，State则是数据库的状态：打开还是关闭 附上一个完整代码 using System; using System.Collections.Generic; using System.ComponentModel; using System.Data; using System.Drawing; using System.Linq; using System.Text; using System.Threading.Tasks; using System.Windows.Forms; using System.Data.SqlClient; namespace SQL { public partial class OpenSQL : Form { public OpenSQL() { InitializeComponent(); } private void Form1_Load(object sender, EventArgs e) { } private void button1_Click(object sender, EventArgs e) { using (SqlConnection con = new SqlConnection(&quot;Data Source=LZY; Initial Catalog=Student; Integrated Security=true&quot;)) { try { con.Open(); MessageBox.Show(&quot;数据库&quot;+con.ServerVersion+con.State); } catch (Exception ex) { MessageBox.Show(ex.ToString()); } finally { con.Close(); MessageBox.Show(&quot;数据库&quot; + con.State); Application.Exit(); } } } } } &nbsp; &lt;div&gt; 作者：u012610276 发表于2014/4/19 0:07:16 [原文链接](http://blog.csdn.net/lzylizhangyan/article/details/24063033) &lt;/div&gt; &lt;div&gt; 阅读：517 评论：0 [查看评论](http://blog.csdn.net/lzylizhangyan/article/details/24063033#comments) &lt;/div&gt;","categories":[],"tags":[]},{"title":"[原]括号匹配","slug":"原-括号匹配","date":"2014-04-13T07:58:42.000Z","updated":"2017-12-11T02:57:37.904Z","comments":true,"path":"2014/04/13/原-括号匹配/","link":"","permalink":"https://lizhangyan.github.io/2014/04/13/原-括号匹配/","excerpt":"","text":"#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #define MAX 100 #define ADD 10 typedef struct { char *top; char *base; int stacksize; }Stack; void CreatStack(Stack *S) { S-&gt;base=(char *)malloc(MAX*sizeof(char)); if(!S) { printf(&quot;申请失败\\n&quot;); } else { S-&gt;top=S-&gt;base; S-&gt;stacksize=MAX; } } void Push(Stack *S, char ch) { char *newbase; if(S-&gt;top-S-&gt;base&gt;=S-&gt;stacksize) { newbase=(char*)realloc(S-&gt;base, (S-&gt;stacksize+ADD)*sizeof(char)); if(!newbase) { printf(&quot;申请失败\\n&quot;); } else { S-&gt;top=S-&gt;base+S-&gt;stacksize; S-&gt;stacksize+=ADD; } } *(S-&gt;top++)=ch; } char Pop(Stack *S) { return *(S-&gt;top-1); } void Delete(Stack *S) { S-&gt;top--; } int cmp(Stack *S) { char ch; int tag=1; scanf(&quot;%c&quot;, &amp;ch); while(ch!='#'&amp;&amp;tag) { switch(ch) { case '(': case '[': case '{': Push(S,ch); break; case ')': if(Pop(S)=='(') { Delete(S); break; } else { tag=0; break; } case ']': if(Pop(S)=='[') { Delete(S);break; } else { tag=0; break; } case '}': if(Pop(S)=='{') { Delete(S); break; } else { tag=0; break; } } scanf(&quot;%c&quot;, &amp;ch); } return tag; } void main() { int tag; Stack S; CreatStack(&amp;S); printf(&quot;括号匹配，以#结束\\n&quot;); tag=cmp(&amp;S); if(tag) { printf(&quot;匹配成功\\n&quot;); } else { printf(&quot;匹配失败\\n&quot;); } } 学完数据结构的括号匹配，发上源代码，请大家多多指教啊 &lt;div&gt; 作者：u012610276 发表于2014/4/13 15:58:42 [原文链接](http://blog.csdn.net/lzylizhangyan/article/details/23605451) &lt;/div&gt; &lt;div&gt; 阅读：420 评论：0 [查看评论](http://blog.csdn.net/lzylizhangyan/article/details/23605451#comments) &lt;/div&gt;","categories":[],"tags":[]},{"title":"[原]第一个博客","slug":"原-第一个博客","date":"2014-04-12T09:42:02.000Z","updated":"2017-12-11T02:57:37.904Z","comments":true,"path":"2014/04/12/原-第一个博客/","link":"","permalink":"https://lizhangyan.github.io/2014/04/12/原-第一个博客/","excerpt":"","text":"&nbsp; &nbsp; &nbsp;以前认为只有大牛才有博客，看了那些人写的博客立马感觉自己渺小了一万倍，我这只IT菜鸟，今日也开通俺 的博客希望以此激励自己早日成为大牛！ &lt;div&gt; 作者：u012610276 发表于2014/4/12 17:42:02 [原文链接](http://blog.csdn.net/lzylizhangyan/article/details/23544311) &lt;/div&gt; &lt;div&gt; 阅读：388 评论：0 [查看评论](http://blog.csdn.net/lzylizhangyan/article/details/23544311#comments) &lt;/div&gt;","categories":[],"tags":[]}]}