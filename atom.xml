<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>你好，欢迎</title>
  
  <subtitle>闲话多说</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lizhangyan.github.io/"/>
  <updated>2018-05-15T13:06:30.116Z</updated>
  <id>https://lizhangyan.github.io/</id>
  
  <author>
    <name>lizhangyan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初识Dubbo</title>
    <link href="https://lizhangyan.github.io/2018/05/15/%E5%88%9D%E8%AF%86Dubbo/"/>
    <id>https://lizhangyan.github.io/2018/05/15/初识Dubbo/</id>
    <published>2018-05-15T12:53:50.000Z</published>
    <updated>2018-05-15T13:06:30.116Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/05/15/初识Dubbo/dubbo.jpg" title="Dubbo"><h1 id="学习Dubbo"><a href="#学习Dubbo" class="headerlink" title="学习Dubbo"></a>学习Dubbo</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/05/15/初识Dubbo/dubbo.jpg&quot; title=&quot;Dubbo&quot;&gt;
&lt;h1 id=&quot;学习Dubbo&quot;&gt;&lt;a href=&quot;#学习Dubbo&quot; class=&quot;headerlink&quot; title=&quot;学习Dubbo&quot;&gt;&lt;/a&gt;学习Dubbo&lt;/
      
    
    </summary>
    
      <category term="Java中间件" scheme="https://lizhangyan.github.io/categories/Java%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="Dubbo学习" scheme="https://lizhangyan.github.io/tags/Dubbo%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>somePhraseOf3D.md</title>
    <link href="https://lizhangyan.github.io/2018/04/16/somePhraseOf3D-md/"/>
    <id>https://lizhangyan.github.io/2018/04/16/somePhraseOf3D-md/</id>
    <published>2018-04-16T09:23:01.000Z</published>
    <updated>2018-04-16T09:23:01.384Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>挑战Python33题</title>
    <link href="https://lizhangyan.github.io/2018/01/09/pythonchange33/"/>
    <id>https://lizhangyan.github.io/2018/01/09/pythonchange33/</id>
    <published>2018-01-09T14:31:07.000Z</published>
    <updated>2018-01-15T06:32:04.259Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/01/09/pythonchange33/logo.jpg" title="PYTHON CHALLENGE"><a id="more"></a><h1 id="WebSite"><a href="#WebSite" class="headerlink" title="WebSite"></a>WebSite</h1><p><a href="http://www.pythonchallenge.com/" target="_blank" rel="noopener">PTYHON CHALLENGE 33</a></p><h2 id="Problem-0"><a href="#Problem-0" class="headerlink" title="Problem 0"></a>Problem 0</h2><p>As shown in following figure:<br><img src="/2018/01/09/pythonchange33/problem0.png" title="PROBLEM0"></p><p><li> Analysis</li></p><blockquote><p>In the above figure, we can see a formula <img src="http://latex.codecogs.com/gif.latex?2^{38}" alt="">, so<br>we can get the problem 1 is calcute the power.</p></blockquote><p><li> Python</li></p><blockquote><p><code>result = 2**28</code> ====&gt; <img src="http://latex.codecogs.com/gif.latex?{result=2^{38}}" alt=""></p></blockquote><h2 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem 1"></a>Problem 1</h2><p>As shown in following figure:<br><img src="/2018/01/09/pythonchange33/problem1.jpg" title="PROBLEM1"></p><p><li> Analysis</li></p><blockquote><p>We can get a string “<code>g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr&#39;q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.</code> “ from the web.</p><p>And in this figure, we can see a map:<strong><em>K-&gt;M, O-&gt;Q, E-&gt;G</em></strong>.<br>So, we can get this is a <strong>2-shift</strong> on alphabet.</p></blockquote><p><li> Python</li></p><p>&gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ori = &quot;g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr&apos;q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.&quot;</span><br><span class="line"></span><br><span class="line">aft = &apos;&apos;</span><br><span class="line">for s in str:</span><br><span class="line">    s_num = ord(s)</span><br><span class="line">    if (s_num&gt;=65 and s_num&lt;= 90) or (s_num&gt;=97 and s_num&lt;= 122):</span><br><span class="line">        s_num = s_num + 2</span><br><span class="line">        if s_num&gt;122:</span><br><span class="line">            s_num = s_num-122 - 1 + 97</span><br><span class="line">        if s_num&gt;90 and s_num &lt; 97:</span><br><span class="line">            s_num = s_num - 90 - 1+65</span><br><span class="line">    print(s+&apos;-----&gt;&apos;+chr(s_num))</span><br><span class="line">    strr = strr + chr(s_num)</span><br><span class="line">print(strr)</span><br></pre></td></tr></table></figure><blockquote><p>result</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i hope you didnt translate it by hand. thats what computers are for. doing it in by hand is inefficient and that&apos;s why this text is so long. using string.maketrans() is recommended. now apply on the url.</span><br></pre></td></tr></table></figure><blockquote><p>Ennnnnnn…..<br>In the result, we can get the author want to use <code>string.maketrans()</code> to apply on URL. But <code>string.maketrans()</code> belongs to Python2. In <strong>Python3</strong>, the method <code>maketrans()</code> is a static method, we can acess the offical document <a href="https://docs.python.org/3/library/stdtypes.html?highlight=maketrans#str.maketrans" target="_blank" rel="noopener">OFFICIAL DOCUMENT</a>.</p><p><li> First we should get</li></p></blockquote>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=&quot;http://www.pythonchallenge.com/pc/def/map.html&quot;</span><br></pre></td></tr></table></figure><blockquote><p><li> Then useing the <code>maketrans()</code></li></p></blockquote>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urltable = url.maktrans(str, aft)</span><br></pre></td></tr></table></figure><blockquote><p><li> Last we use <code>translate()</code>,</li></p></blockquote>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urlaft = url.translate(urltable)</span><br></pre></td></tr></table></figure><p>So, the result is</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httr://yyy.rathopehcnngpig.eoo/re/fgh/ocr.hton</span><br></pre></td></tr></table></figure><p>Then we can get the real <strong><em>URL</em></strong>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.pythonchallenge.com/pc/def/ocr.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2018/01/09/pythonchange33/logo.jpg&quot; title=&quot;PYTHON CHALLENGE&quot;&gt;
    
    </summary>
    
      <category term="就会这么点语言" scheme="https://lizhangyan.github.io/categories/%E5%B0%B1%E4%BC%9A%E8%BF%99%E4%B9%88%E7%82%B9%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="语言" scheme="https://lizhangyan.github.io/tags/%E8%AF%AD%E8%A8%80/"/>
    
      <category term="python" scheme="https://lizhangyan.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>matlabpointcloud</title>
    <link href="https://lizhangyan.github.io/2017/12/22/matlabpointcloud/"/>
    <id>https://lizhangyan.github.io/2017/12/22/matlabpointcloud/</id>
    <published>2017-12-22T08:41:25.000Z</published>
    <updated>2017-12-22T08:41:26.039Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>3D人脸预处理</title>
    <link href="https://lizhangyan.github.io/2017/12/22/facepreprocessing/"/>
    <id>https://lizhangyan.github.io/2017/12/22/facepreprocessing/</id>
    <published>2017-12-22T00:39:38.000Z</published>
    <updated>2017-12-22T09:09:27.908Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/12/22/facepreprocessing/1.jpg" title="预处理过程"><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>3D人脸预处理是整个算法实现的必不可少的一步，用深度摄像头获取的信息，大部分是点云，多少会有点瑕疵，更何况我们只需要面部区域，所以要对获取的三维点云进行预处理。<br>实验所用的3D人脸最初是这样的：<br><img src="/2017/12/22/facepreprocessing/original.jpg" title="原始图像"><br>预处理主要分为三个步骤：</p><p><li> Filling Hole</li></p><p><li> Face Cropping</li></p><p><li> Smoothing &amp; Pose Correction</li></p><p>效果如下图所示：<br><img src="/2017/12/22/facepreprocessing/steps.jpg" title="预处理步骤"></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/12/22/facepreprocessing/1.jpg&quot; title=&quot;预处理过程&quot;&gt;
    
    </summary>
    
      <category term="这个课题不好搞" scheme="https://lizhangyan.github.io/categories/%E8%BF%99%E4%B8%AA%E8%AF%BE%E9%A2%98%E4%B8%8D%E5%A5%BD%E6%90%9E/"/>
    
    
      <category term="人脸数据库" scheme="https://lizhangyan.github.io/tags/%E4%BA%BA%E8%84%B8%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="人脸识别" scheme="https://lizhangyan.github.io/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>paper笔记</title>
    <link href="https://lizhangyan.github.io/2017/12/19/papernotes/"/>
    <id>https://lizhangyan.github.io/2017/12/19/papernotes/</id>
    <published>2017-12-19T02:20:28.000Z</published>
    <updated>2017-12-19T02:43:26.170Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><font size="24"><strong>课题虽难，起步也慢<br>但</strong></font></p><br><img src="/2017/12/19/papernotes/1.jpg" title="论文笔记"><br><a id="more"></a><p></p><h1 id="Covariance-Matrix"><a href="#Covariance-Matrix" class="headerlink" title="Covariance Matrix"></a>Covariance Matrix</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;font size=&quot;24&quot;&gt;&lt;strong&gt;课题虽难，起步也慢&lt;br&gt;但&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;&lt;br&gt;&lt;img src=&quot;/2017/12/19/papernotes/1.jpg&quot; title=&quot;论文笔记&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="这个课题不好搞" scheme="https://lizhangyan.github.io/categories/%E8%BF%99%E4%B8%AA%E8%AF%BE%E9%A2%98%E4%B8%8D%E5%A5%BD%E6%90%9E/"/>
    
    
      <category term="论文" scheme="https://lizhangyan.github.io/tags/%E8%AE%BA%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>C++基础</title>
    <link href="https://lizhangyan.github.io/2017/12/18/C-%E5%9F%BA%E7%A1%80/"/>
    <id>https://lizhangyan.github.io/2017/12/18/C-基础/</id>
    <published>2017-12-18T07:58:18.000Z</published>
    <updated>2017-12-18T09:02:23.797Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/12/18/C-基础/c1.png" title="C++"><a id="more"></a><h1 id="C-简介"><a href="#C-简介" class="headerlink" title="C++简介"></a>C++简介</h1><p><strong>C++</strong>是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言，支持过程化编程、面向对象编程和泛型编程。</p><h2 id="面向对象四大特性"><a href="#面向对象四大特性" class="headerlink" title="面向对象四大特性"></a>面向对象四大特性</h2><p><li> <strong>封装</strong></li></p><p><li> <strong>抽象</strong></li></p><p><li> <strong>继承</strong></li></p><p><li> <strong>多态</strong></li></p><h2 id="三大部分"><a href="#三大部分" class="headerlink" title="三大部分"></a>三大部分</h2><p><li> <strong>核心语言</strong>，提供了所有构件块，包括变量、数据类型和常量。</li></p><p><li> <strong>C++标准库</strong>，提供了大量的函数，用于操作文件、字符串等。</li></p><p><li> <strong>标准模板库 STL</strong>，提供了大量的方法，用于操作数据结构。</li></p><h2 id="C-环境设置"><a href="#C-环境设置" class="headerlink" title="C++环境设置"></a>C++环境设置</h2><p>C++编译器和文本编辑器/IDE。</p><h3 id="GUN-编译器"><a href="#GUN-编译器" class="headerlink" title="GUN 编译器"></a>GUN 编译器</h3><p>GNU 的C/C++编译器是最常用的免费编译器。</p><p><li> <strong>UNIX/Linux上的安装</strong></li></p><blockquote><p><a href="http://gcc.gnu.org/install/" target="_blank" rel="noopener">GCC安装教程</a></p></blockquote><p><li> <strong>Mac OS X 上的安装</strong></li></p><blockquote><p>安装Xcode <a href="http://developer.apple.com/technologies/tools/" target="_blank" rel="noopener">Xcode下载</a></p></blockquote><p><li> <strong>使用Visual Studio</strong></li></p><blockquote><p><a href="https://www.visualstudio.com/" target="_blank" rel="noopener">VS 2015下载</a></p></blockquote><h1 id="C-数据结构"><a href="#C-数据结构" class="headerlink" title="C++数据结构"></a>C++数据结构</h1><h2 id="基本的内置类型"><a href="#基本的内置类型" class="headerlink" title="基本的内置类型"></a>基本的内置类型</h2><p><li> bool</li></p><p><li> char</li></p><p><li> int</li></p><p><li> float</li></p><p><li> double</li></p><p><li> void</li></p><p><li> wchar_t 宽字符型</li></p><blockquote><p>可以用<strong>signed,unsigned,short,long</strong>修饰</p></blockquote><p><strong>如图所示</strong>:<br><img src="/2017/12/18/C-基础/datatype.png" title="C++"></p><h2 id="typedef-声明"><a href="#typedef-声明" class="headerlink" title="typedef 声明"></a>typedef 声明</h2><p>使用typedef为已有的类型取一个新名字。<br><code>typedef int feet;</code></p><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><p>若干常量的集合<br>形式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum 枚举名&#123;</span><br><span class="line">    标识符[=整形常数],</span><br><span class="line">    标识符[=整形常数],</span><br><span class="line">    ...</span><br><span class="line">    标识符[=整形常数]</span><br><span class="line">&#125; 枚举变量;</span><br></pre></td></tr></table></figure></p><blockquote><p>默认情况下，第一个名称的值为<strong>0</strong>，以此类推，也可以给名称赋予一个特殊的值，只需要添加一个初始值即可。</p></blockquote><p>  例如：<br>  <code>enum color{red, green=5, blue}</code></p><blockquote><p>这里blue默认值为6，但red仍为1。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/12/18/C-基础/c1.png&quot; title=&quot;C++&quot;&gt;
    
    </summary>
    
      <category term="就会这么点语言" scheme="https://lizhangyan.github.io/categories/%E5%B0%B1%E4%BC%9A%E8%BF%99%E4%B9%88%E7%82%B9%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="C++" scheme="https://lizhangyan.github.io/tags/C/"/>
    
      <category term="语言" scheme="https://lizhangyan.github.io/tags/%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>math基础</title>
    <link href="https://lizhangyan.github.io/2017/12/18/math%E5%9F%BA%E7%A1%80/"/>
    <id>https://lizhangyan.github.io/2017/12/18/math基础/</id>
    <published>2017-12-18T02:32:18.000Z</published>
    <updated>2017-12-18T03:03:18.227Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/12/18/math基础/math.png" title="MATH"><a id="more"></a><h1 id="这是课题学习过程中遇到的数学问题汇总，每个链接表示一个问题"><a href="#这是课题学习过程中遇到的数学问题汇总，每个链接表示一个问题" class="headerlink" title="这是课题学习过程中遇到的数学问题汇总，每个链接表示一个问题"></a>这是课题学习过程中遇到的数学问题汇总，每个链接表示一个问题</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><a href="../../../../math/tensor">TENSOR</a></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/12/18/math基础/math.png&quot; title=&quot;MATH&quot;&gt;
    
    </summary>
    
      <category term="万物基于MATH" scheme="https://lizhangyan.github.io/categories/%E4%B8%87%E7%89%A9%E5%9F%BA%E4%BA%8EMATH/"/>
    
    
      <category term="数学" scheme="https://lizhangyan.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>html基础</title>
    <link href="https://lizhangyan.github.io/2017/12/17/html%E5%9F%BA%E7%A1%80/"/>
    <id>https://lizhangyan.github.io/2017/12/17/html基础/</id>
    <published>2017-12-17T13:50:48.000Z</published>
    <updated>2017-12-18T07:59:30.637Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/12/17/html基础/html.jpg" title="HTML"><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><h2 id="What-is-HTML"><a href="#What-is-HTML" class="headerlink" title="What is HTML?"></a>What is HTML?</h2><p><strong>HTML</strong> denotes for <strong><em>HyperText Markup Language</em></strong>.<br><a id="more"></a><br>It uses <strong>tags</strong> to identify content.<br><strong>Example</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt; I&apos;m a paragraph&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><h3 id="The-Web-Structure"><a href="#The-Web-Structure" class="headerlink" title="The Web Structure"></a>The Web Structure</h3><p><li> <strong>Modern Web Design</strong></li></p><blockquote><p><strong>HTML</strong>: Structure<br><strong>CSS</strong>: Presentation<br><strong>JavaScript</strong>: Behavior</p></blockquote><h2 id="Basic-HTML-Document-Structure"><a href="#Basic-HTML-Document-Structure" class="headerlink" title="Basic HTML Document Structure"></a>Basic HTML Document Structure</h2><p><li> The HTML document has    opening and closing HTML tags.</li></p><p><strong>Example</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><li> <strong>head</strong></li></p><p>The head of an HTML file contains all of the <strong>non-visual elements</strong> that help make the page work.</p><p><strong>Example</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;...&lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><li> <strong>body</strong></li></p><blockquote><p>The body tag follows the head tag.<br>    All visual-structural elements are contained withiin the body tag.</p><p>Headings, paragraphs, lists, quotes, images, and links are just a few of the elements that can be contained within the body tag.</p></blockquote><p><strong>Example</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;...&lt;/head&gt;</span><br><span class="line">  &lt;body&gt;...&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h2 id="Creating-Your-First-HTML-page"><a href="#Creating-Your-First-HTML-page" class="headerlink" title="Creating Your First HTML page"></a>Creating Your First HTML page</h2><p><li> <strong>title tag</strong></li></p><p>It describes the title of the web page, and it element to your head section</p><p><strong>Example</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;First Page&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    This is a line of text.</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;html&gt;</span><br></pre></td></tr></table></figure></p><p><strong>Result</strong><br><img src="/2017/12/17/html基础/title.jpg" title="TITLE TAG"></p><h2 id="HTML-Basics"><a href="#HTML-Basics" class="headerlink" title="HTML Basics"></a>HTML Basics</h2><blockquote><p><li> <strong>Paragraphs</strong></li></p></blockquote><pre><code>`&lt;p&gt; ... &lt;/p&gt;`</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/12/17/html基础/html.jpg&quot; title=&quot;HTML&quot;&gt;
&lt;h1 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;h2 id=&quot;What-is-HTML&quot;&gt;&lt;a href=&quot;#What-is-HTML&quot; class=&quot;headerlink&quot; title=&quot;What is HTML?&quot;&gt;&lt;/a&gt;What is HTML?&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt; denotes for &lt;strong&gt;&lt;em&gt;HyperText Markup Language&lt;/em&gt;&lt;/strong&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="就会这么点语言" scheme="https://lizhangyan.github.io/categories/%E5%B0%B1%E4%BC%9A%E8%BF%99%E4%B9%88%E7%82%B9%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="语言" scheme="https://lizhangyan.github.io/tags/%E8%AF%AD%E8%A8%80/"/>
    
      <category term="html" scheme="https://lizhangyan.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>配置JAVA环境变量</title>
    <link href="https://lizhangyan.github.io/2017/12/14/%E9%85%8D%E7%BD%AEJAVA%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <id>https://lizhangyan.github.io/2017/12/14/配置JAVA环境变量/</id>
    <published>2017-12-14T03:51:36.000Z</published>
    <updated>2017-12-14T05:58:56.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JAVA-环境变量配置"><a href="#JAVA-环境变量配置" class="headerlink" title="JAVA 环境变量配置"></a>JAVA 环境变量配置</h1><hr><h2 id="修改-etc-profile文件"><a href="#修改-etc-profile文件" class="headerlink" title="修改/etc/profile文件"></a>修改/etc/profile文件</h2><blockquote><p>计算机下所有的用户都有权限使用这些环境变量</p></blockquote><p>在<strong><em>profile</em></strong>文件末尾加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/java/jdk1.8.0_131</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure><a id="more"></a><p>修改结束后终端输入：<code>sudo source /etc/profile</code>，生效</p><hr><h2 id="修改-bash-profile文件"><a href="#修改-bash-profile文件" class="headerlink" title="修改.bash_profile文件"></a>修改.bash_profile文件</h2><blockquote><p>方法更为安全，可以把环境变量的权限控制到用户级别</p></blockquote><p>在<strong><em>.bash_profile</em></strong>文件末尾加入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/java/jdk1.8.0_131</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure><hr><h2 id="直接在shell下设置变量"><a href="#直接在shell下设置变量" class="headerlink" title="直接在shell下设置变量"></a>直接在shell下设置变量</h2><blockquote><p>只限于当前shell</p></blockquote><p>只需在终端执行下列命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/opt/java/jdk1.8.0_131</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JAVA-环境变量配置&quot;&gt;&lt;a href=&quot;#JAVA-环境变量配置&quot; class=&quot;headerlink&quot; title=&quot;JAVA 环境变量配置&quot;&gt;&lt;/a&gt;JAVA 环境变量配置&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;修改-etc-profile文件&quot;&gt;&lt;a href=&quot;#修改-etc-profile文件&quot; class=&quot;headerlink&quot; title=&quot;修改/etc/profile文件&quot;&gt;&lt;/a&gt;修改/etc/profile文件&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;计算机下所有的用户都有权限使用这些环境变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;strong&gt;&lt;em&gt;profile&lt;/em&gt;&lt;/strong&gt;文件末尾加入：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export JAVA_HOME=/opt/java/jdk1.8.0_131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export PATH=$JAVA_HOME/bin:$PATH&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="就会这么点语言" scheme="https://lizhangyan.github.io/categories/%E5%B0%B1%E4%BC%9A%E8%BF%99%E4%B9%88%E7%82%B9%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="java" scheme="https://lizhangyan.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>3D人脸数据库</title>
    <link href="https://lizhangyan.github.io/2017/12/14/3D%E4%BA%BA%E8%84%B8%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://lizhangyan.github.io/2017/12/14/3D人脸数据库/</id>
    <published>2017-12-14T03:38:44.000Z</published>
    <updated>2017-12-14T06:19:09.472Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/12/14/3D人脸数据库/faceid.png" title="FACEID"><a id="more"></a><h1 id="公开免费申请的3D人脸数据库"><a href="#公开免费申请的3D人脸数据库" class="headerlink" title="公开免费申请的3D人脸数据库"></a>公开免费申请的3D人脸数据库</h1><ul><li><strong>BU-3DFE</strong><blockquote><p>Binghamton University 3D Facial Expression</p><p>BU-3DFE 库由Binghamton University 提供，包括 100 人，其中 44 名男性，56 名女性，采集对象包括白人、黑人、亚洲人、印度人等。每个人被采集 25 幅图像，包括一<br>个中性模型和 6 类带表情模型，每种表情分为 4 种程度，包括的表情有：高兴、厌恶、恐惧、生气、惊讶、悲伤。</p></blockquote></li></ul><blockquote><p><a href="http://www.cs.binghamton.edu/~lijun/Research/3DFE/3DFE_Analysis.html" target="_blank" rel="noopener">ACCESS SITE</a></p></blockquote><hr><ul><li><strong>UND</strong><blockquote><p><strong>University of Notre Dame database</strong></p><p>UND 库由University of Notre Dame 提供，其中包括 277 人的 953 幅人脸深度图像，采集设备为 Minolta 三维扫描仪。所有的人脸都是正面、无表情的，图像尺寸为 320*240。这个库包含了用于三维人脸配准的标准库 FRGC Ver1.0。</p></blockquote></li></ul><hr><ul><li><strong>FRGC Ver2.0</strong><br>&gt;<blockquote><p>FRGC V2.0 包含了465 人的 4007 幅 2.5 维图像，图像尺寸为 320*240，采集设备为Minolta Vivid 900/910 seriesscanner，采集时间从 2003 年秋至 2004 年春。除了中性表情外，还包括一些带表情的图像，如：微笑、惊讶等。</p></blockquote></li></ul><hr><ul><li><strong>GavabDB</strong><br>&gt;<blockquote><p>GavabDB 库包含了 61 人的 549 幅三维图像，其中 45 名为男性，16 名为女性。所有的被采集者都是高加索人种，年龄从 18 至 40 岁。每个采集分别采集 9 幅图像：2 幅中性正面、2 幅左右全侧面、1 幅仰头、1 幅低头、1 幅微笑表情、1 幅大笑表情、1 幅随意表情姿态图像。</p><p><a href="http://www.gavab.etsii.urjc.es/" target="_blank" rel="noopener">ACCESS SITE</a></p></blockquote></li></ul><hr><ul><li><strong>3D_RMA</strong><br>&gt;<blockquote><p>3D_RMA 库包含了 120 人，每人 6 幅点云深度数据，包括姿态：正面、左或右、仰头或低头。该数据由基于结构光的采集系统分两次采集。</p></blockquote></li></ul><hr><ul><li><strong>BJUT-3D Facedatabase</strong><br>&gt;<blockquote><p>BJUT 三维人脸数据库由北京科技大学提供，其中包含 500 人的三维模型，男女各半。该库用 3D CyberWare 3D scanner采集，每人采集一个三维模型，对每个模型去噪并切除了多余部</p></blockquote></li></ul><hr><ul><li><strong>BOSPHORUS DATABASE</strong><blockquote><p>The Bosphorus Database is intended for research on 3D and 2D human face processing tasks including expression recognition, facial action unit detection, facial action unit intensity estimation, face recognition under adverse conditions, deformable face modeling, and 3D face reconstruction. There are 105 subjects and 4666 faces in the database. This database is unique in three aspects:</p><ol><li>Rich repertoire of expressions:<br>Up to 35 expressions per subject<br>FACS scoring (includes intensity and asymmetry codes for each AU)<br>One third of the subjects are professional actors/actresses</li><li>Systematic head poses (13 yaw and pitch rotations)</li><li>Varieties of face occlusions (beard &amp; moustache, hair, hand, eyeglasses)</li></ol></blockquote></li></ul><blockquote><p><a href="http://bosphorus.ee.boun.edu.tr/Home.aspx" target="_blank" rel="noopener">ACCESS SITE</a><br><img src="http://bosphorus.ee.boun.edu.tr/Portals/0/Images/imtab_mixed1_files_small.jpg" alt="图片"></p></blockquote><hr><ul><li>3DMAD<blockquote><p>The 3D Mask Attack Database (3DMAD) is a biometric (face) spoofing database. It currently contains 76500 frames of 17 persons, recorded using Kinect for both real-access and spoofing attacks. Each frame consists of:</p></blockquote></li><li>a depth image (640x480 pixels – 1x11 bits)</li><li>the corresponding RGB image (640x480 pixels – 3x8 bits)</li><li>manually annotated eye positions (with respect to the RGB image).</li></ul><blockquote><p><a href="https://www.idiap.ch/dataset/3dmad" target="_blank" rel="noopener">ACCESS SITE</a><br><img src="https://www.idiap.ch/dataset/3dmad/fig_masks.png" alt="IMAGE"></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/12/14/3D人脸数据库/faceid.png&quot; title=&quot;FACEID&quot;&gt;
    
    </summary>
    
      <category term="这个课题不好搞" scheme="https://lizhangyan.github.io/categories/%E8%BF%99%E4%B8%AA%E8%AF%BE%E9%A2%98%E4%B8%8D%E5%A5%BD%E6%90%9E/"/>
    
    
      <category term="人脸数据库" scheme="https://lizhangyan.github.io/tags/%E4%BA%BA%E8%84%B8%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="人脸识别" scheme="https://lizhangyan.github.io/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>CV领域网站</title>
    <link href="https://lizhangyan.github.io/2017/12/14/CV%E9%A2%86%E5%9F%9F%E7%BD%91%E7%AB%99/"/>
    <id>https://lizhangyan.github.io/2017/12/14/CV领域网站/</id>
    <published>2017-12-14T03:37:05.000Z</published>
    <updated>2017-12-14T03:38:07.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CV-相关内容"><a href="#CV-相关内容" class="headerlink" title="CV 相关内容"></a>CV 相关内容</h1><blockquote><p>以下链接是本人整理的关于计算机视觉（ComputerVision, CV）相关领域的网站链接，其中有CV牛人的主页，CV研究小组的主页，CV领域的paper,代码，CV领域的最新动态，国内的应用情况等等。打算从事这个行业或者刚入门的朋友可以多关注这些网站，多了解一些CV的具体应用。搞研究的朋友也可以从中了解到很多牛人的研究动态、招生情况等。总之，我认为，知识只有分享才能产生更大的价值，真诚希望下面的链接能对朋友们有所帮助。</p></blockquote><hr><p><li> googleResearch； <a href="http://research.google.com/index.html" target="_blank" rel="noopener">http://research.google.com/index.html</a></li></p><p><li> MIT博士，汤晓欧学生林达华； <a href="http://people.csail.mit.edu/dhlin/index.html" target="_blank" rel="noopener">http://people.csail.mit.edu/dhlin/index.html</a></li></p><p><li>MIT博士后Douglas Lanman； <a href="http://web.media.mit.edu/~dlanman/" target="_blank" rel="noopener">http://web.media.mit.edu/~dlanman/</a></li></p><p><li>opencv中文网站； <a href="http://www.opencv.org.cn/index.php/%E9%A6%96%E9%A1%B5" target="_blank" rel="noopener">http://www.opencv.org.cn/index.php/%E9%A6%96%E9%A1%B5</a></li></p><p><li>Stanford大学vision实验室； <a href="http://vision.stanford.edu/research.html" target="_blank" rel="noopener">http://vision.stanford.edu/research.html</a></li></p><p><li>Stanford大学博士崔靖宇； <a href="http://www.stanford.edu/~jycui/" target="_blank" rel="noopener">http://www.stanford.edu/~jycui/</a></li></p><p><li>UCLA教授朱松纯； <a href="http://www.stat.ucla.edu/~sczhu/" target="_blank" rel="noopener">http://www.stat.ucla.edu/~sczhu/</a></li></p><p><li>中国人工智能网； <a href="http://www.chinaai.org/" target="_blank" rel="noopener">http://www.chinaai.org/</a></li></p><p><li>中国视觉网； <a href="http://www.china-vision.net/" target="_blank" rel="noopener">http://www.china-vision.net/</a></li></p><p><li>中科院自动化所； <a href="http://www.ia.cas.cn/" target="_blank" rel="noopener">http://www.ia.cas.cn/</a></li></p><p><li>中科院自动化所李子青研究员； <a href="http://www.cbsr.ia.ac.cn/users/szli/" target="_blank" rel="noopener">http://www.cbsr.ia.ac.cn/users/szli/</a></li></p><p><li>中科院计算所山世光研究员； <a href="http://www.jdl.ac.cn/user/sgshan/" target="_blank" rel="noopener">http://www.jdl.ac.cn/user/sgshan/</a></li></p><p><li>人脸识别主页； <a href="http://www.face-rec.org/" target="_blank" rel="noopener">http://www.face-rec.org/</a></li></p><p><li>加州大学伯克利分校CV小组； <a href="http://www.eecs.berkeley.edu/Research/Projects/CS/vision/" target="_blank" rel="noopener">http://www.eecs.berkeley.edu/Research/Projects/CS/vision/</a></li></p><p><li>南加州大学CV实验室； <a href="http://iris.usc.edu/USC-Computer-Vision.html" target="_blank" rel="noopener">http://iris.usc.edu/USC-Computer-Vision.html</a></li></p><p><li>卡内基梅隆大学CV主页；<a href="http://www.cs.cmu.edu/afs/cs/project/cil/ftp/html/vision.html" target="_blank" rel="noopener">http://www.cs.cmu.edu/afs/cs/project/cil/ftp/html/vision.html</a></li></p><p><li>微软CV研究员Richard Szeliski；<a href="http://research.microsoft.com/en-us/um/people/szeliski/" target="_blank" rel="noopener">http://research.microsoft.com/en-us/um/people/szeliski/</a></li></p><p><li>微软亚洲研究院计算机视觉研究组； <a href="http://research.microsoft.com/en-us/groups/vc/" target="_blank" rel="noopener">http://research.microsoft.com/en-us/groups/vc/</a></li></p><p><li>微软剑桥研究院ML与CV研究组； <a href="http://research.microsoft.com/en-us/groups/mlp/default.aspx" target="_blank" rel="noopener">http://research.microsoft.com/en-us/groups/mlp/default.aspx</a></li></p><p><li>研学论坛； <a href="http://bbs.matwav.com/" target="_blank" rel="noopener">http://bbs.matwav.com/</a></li></p><p><li>美国Rutgers大学助理教授刘青山； <a href="http://www.research.rutgers.edu/~qsliu/" target="_blank" rel="noopener">http://www.research.rutgers.edu/~qsliu/</a></li></p><p><li>计算机视觉最新资讯网； <a href="http://www.cvchina.info/" target="_blank" rel="noopener">http://www.cvchina.info/</a></li></p><p><li>运动检测、阴影、跟踪的测试视频下载； <a href="http://apps.hi.baidu.com/share/detail/18903287" target="_blank" rel="noopener">http://apps.hi.baidu.com/share/detail/18903287</a></li></p><p><li>香港中文大学助理教授王晓刚； <a href="http://www.ee.cuhk.edu.hk/~xgwang/" target="_blank" rel="noopener">http://www.ee.cuhk.edu.hk/~xgwang/</a></li></p><p><li>香港中文大学多媒体实验室; <a href="http://mmlab.ie.cuhk.edu.hk/" target="_blank" rel="noopener">http://mmlab.ie.cuhk.edu.hk/</a></li></p><p><li>U.C. San Diego. computer vision;<a href="http://vision.ucsd.edu/content/home" target="_blank" rel="noopener">http://vision.ucsd.edu/content/home</a></li></p><p><li>CVonline; <a href="http://homepages.inf.ed.ac.uk/rbf/CVonline/" target="_blank" rel="noopener">http://homepages.inf.ed.ac.uk/rbf/CVonline/</a></li></p><p><li>computer vision software; <a href="http://peipa.essex.ac.uk/info/software.html" target="_blank" rel="noopener">http://peipa.essex.ac.uk/info/software.html</a></li></p><p><li>Computer Vision Resource; <a href="http://www.cvpapers.com/" target="_blank" rel="noopener">http://www.cvpapers.com/</a></li></p><p><li>computer vision research groups;<a href="http://peipa.essex.ac.uk/info/groups.html" target="_blank" rel="noopener">http://peipa.essex.ac.uk/info/groups.html</a></li></p><p><li>computer vision center; <a href="http://computervisioncentral.com/cvcnews" target="_blank" rel="noopener">http://computervisioncentral.com/cvcnews</a></li></p><p><li>浙江大学图像技术研究与应用</li><li>团队：<a href="http://www.dvzju.com/" target="_blank" rel="noopener">http://www.dvzju.com/</a></li></p><p><li>自动识别网：<a href="http://www.autoid-china.com.cn/" target="_blank" rel="noopener">http://www.autoid-china.com.cn/</a></li></p><p><li>清华大学章毓晋教授：<a href="http://www.tsinghua.edu.cn/publish/ee/4157/2010/20101217173552339241557/20101217173552339241557_.html" target="_blank" rel="noopener">http://www.tsinghua.edu.cn/publish/ee/4157/2010/20101217173552339241557/20101217173552339241557_.html</a></li></p><p><li>顶级民用机器人研究小组Porf.Gary领导的Willow Garage:<a href="http://www.willowgarage.com/" target="_blank" rel="noopener">http://www.willowgarage.com/</a></li></p><p><li>上海交通大学图像处理与模式识别研究所：<a href="http://www.pami.sjtu.edu.cn/" target="_blank" rel="noopener">http://www.pami.sjtu.edu.cn/</a></li></p><p><li>上海交通大学计算机视觉实验室刘允才教授：<a href="http://www.visionlab.sjtu.edu.cn/" target="_blank" rel="noopener">http://www.visionlab.sjtu.edu.cn/</a></li></p><p><li>德克萨斯州大学奥斯汀分校助理教授Kristen Grauman ：<a href="http://www.cs.utexas.edu/~grauman/" target="_blank" rel="noopener">http://www.cs.utexas.edu/~grauman/</a></li></p><p><li>清华大学电子工程系智能图文信息处理实验室</li><li>：<a href="http://ocrserv.ee.tsinghua.edu.cn/auto/index.asp" target="_blank" rel="noopener">http://ocrserv.ee.tsinghua.edu.cn/auto/index.asp</a></li></p><p><li>北京大学高文教授：<a href="http://www.jdl.ac.cn/htm-gaowen/" target="_blank" rel="noopener">http://www.jdl.ac.cn/htm-gaowen/</a></li></p><p><li>清华大学艾海舟教授：<a href="http://media.cs.tsinghua.edu.cn/cn/aihz" target="_blank" rel="noopener">http://media.cs.tsinghua.edu.cn/cn/aihz</a></li></p><p><li>中科院生物识别与安全技术研究中心：<a href="http://www.cbsr.ia.ac.cn/china/index%20CH.asp" target="_blank" rel="noopener">http://www.cbsr.ia.ac.cn/china/index%20CH.asp</a></li></p><p><li>瑞士巴塞尔大学 Thomas Vetter教授：<a href="http://informatik.unibas.ch/personen/vetter_t.html" target="_blank" rel="noopener">http://informatik.unibas.ch/personen/vetter_t.html</a></li></p><p><li>俄勒冈州立大学 Rob Hess博士：<a href="http://blogs.oregonstate.edu/hess/" target="_blank" rel="noopener">http://blogs.oregonstate.edu/hess/</a></li></p><p><li>深圳大学 于仕祺副教授：<a href="http://yushiqi.cn/" target="_blank" rel="noopener">http://yushiqi.cn/</a></li></p><p><li>西安交通大学人工智能与机器人研究所：<a href="http://www.aiar.xjtu.edu.cn/" target="_blank" rel="noopener">http://www.aiar.xjtu.edu.cn/</a></li></p><p><li>卡内基梅隆大学研究员Robert T. Collins:<a href="http://www.cs.cmu.edu/~rcollins/home.html#Background" target="_blank" rel="noopener">http://www.cs.cmu.edu/~rcollins/home.html#Background</a></li></p><p><li>MIT博士Chris Stauffer:<a href="http://people.csail.mit.edu/stauffer/Home/index.php" target="_blank" rel="noopener">http://people.csail.mit.edu/stauffer/Home/index.php</a></li></p><p><li>：<a href="http://www.cse.msu.edu/rgroups/biometrics/" target="_blank" rel="noopener">http://www.cse.msu.edu/rgroups/biometrics/</a></li></p><p><li>美国伊利诺伊州立大学Thomas S. Huang:<a href="http://www.beckman.illinois.edu/directory/t-huang1" target="_blank" rel="noopener">http://www.beckman.illinois.edu/directory/t-huang1</a></li></p><p><li>武汉大学数字摄影测量与计算机视觉研究中心：<a href="http://www.whudpcv.cn/index.asp" target="_blank" rel="noopener">http://www.whudpcv.cn/index.asp</a></li></p><p><li>瑞士巴塞尔大学Sami Romdhani助理研究员：<a href="http://informatik.unibas.ch/personen/romdhani_sami/" target="_blank" rel="noopener">http://informatik.unibas.ch/personen/romdhani_sami/</a></li></p><p><li>CMU大学研究员Yang Wang:<a href="http://www.cs.cmu.edu/~wangy/home.html" target="_blank" rel="noopener">http://www.cs.cmu.edu/~wangy/home.html</a></li></p><p><li>英国曼彻斯特大学Tim Cootes教授：<a href="http://personalpages.manchester.ac.uk/staff/timothy.f.cootes/" target="_blank" rel="noopener">http://personalpages.manchester.ac.uk/staff/timothy.f.cootes/</a></li></p><p><li>美国罗彻斯特大学教授Jiebo Luo:<a href="http://www.cs.rochester.edu/u/jluo/" target="_blank" rel="noopener">http://www.cs.rochester.edu/u/jluo/</a></li></p><p><li>美国普渡大学机器人视觉实验室：<a href="https://engineering.purdue.edu/RVL/Welcome.html" target="_blank" rel="noopener">https://engineering.purdue.edu/RVL/Welcome.html</a></li></p><p><li>美国宾利州立大学感知、运动与认识实验室：<a href="http://vision.cse.psu.edu/home/home.shtml" target="_blank" rel="noopener">http://vision.cse.psu.edu/home/home.shtml</a></li></p><p><li>美国宾夕法尼亚大学GRASP实验室：<a href="https://www.grasp.upenn.edu/" target="_blank" rel="noopener">https://www.grasp.upenn.edu/</a></li></p><p><li>美国内达华大学里诺校区CV实验室：<a href="http://www.cse.unr.edu/CVL/index.php" target="_blank" rel="noopener">http://www.cse.unr.edu/CVL/index.php</a></li></p><p><li>美国密西根大学vision实验室：<a href="http://www.eecs.umich.edu/vision/index.html" target="_blank" rel="noopener">http://www.eecs.umich.edu/vision/index.html</a></li></p><p><li>,视觉实验室：<a href="http://vis-www.cs.umass.edu/index.html" target="_blank" rel="noopener">http://vis-www.cs.umass.edu/index.html</a></li></p><p><li>华盛顿大学博士后Iva Kemelmacher:<a href="http://www.cs.washington.edu/homes/kemelmi" target="_blank" rel="noopener">http://www.cs.washington.edu/homes/kemelmi</a></li></p><p><li>以色列魏茨曼科技大学Ronen Basri:<a href="http://www.wisdom.weizmann.ac.il/~ronen/index.html" target="_blank" rel="noopener">http://www.wisdom.weizmann.ac.il/~ronen/index.html</a></li></p><p><li>瑞士ETH-Zurich大学CV实验室：<a href="http://www.vision.ee.ethz.ch/boostingTrackers/index.htm" target="_blank" rel="noopener">http://www.vision.ee.ethz.ch/boostingTrackers/index.htm</a></li></p><p><li>微软CV研究员张正友：<a href="http://research.microsoft.com/en-us/um/people/zhang/" target="_blank" rel="noopener">http://research.microsoft.com/en-us/um/people/zhang/</a></li></p><p><li>中科院自动化所医学影像研究室：<a href="http://www.3dmed.net/" target="_blank" rel="noopener">http://www.3dmed.net/</a></li></p><p><li>中科院田捷研究员：<a href="http://www.3dmed.net/tian/" target="_blank" rel="noopener">http://www.3dmed.net/tian/</a></li></p><p><li>微软Redmond研究院研究员Simon Baker:<a href="http://research.microsoft.com/en-us/people/sbaker/" target="_blank" rel="noopener">http://research.microsoft.com/en-us/people/sbaker/</a></li></p><p><li>普林斯顿大学教授李凯：<a href="http://www.cs.princeton.edu/~li/" target="_blank" rel="noopener">http://www.cs.princeton.edu/~li/</a></li></p><p><li>普林斯顿大学博士贾登：<a href="http://www.cs.princeton.edu/~jiadeng/" target="_blank" rel="noopener">http://www.cs.princeton.edu/~jiadeng/</a></li></p><p><li>牛津大学教授Andrew Zisserman： <a href="http://www.robots.ox.ac.uk/~az/" target="_blank" rel="noopener">http://www.robots.ox.ac.uk/~az/</a></li></p><p><li>英国leeds大学研究员Mark Everingham:<a href="http://www.comp.leeds.ac.uk/me/" target="_blank" rel="noopener">http://www.comp.leeds.ac.uk/me/</a></li></p><p><li>英国爱丁堡大学教授Chris William: <a href="http://homepages.inf.ed.ac.uk/ckiw/" target="_blank" rel="noopener">http://homepages.inf.ed.ac.uk/ckiw/</a></li></p><p><li>微软剑桥研究院研究员John Winn: <a href="http://johnwinn.org/" target="_blank" rel="noopener">http://johnwinn.org/</a></li></p><p><li>佐治亚理工学院教授Monson H.Hayes：<a href="http://savannah.gatech.edu/people/mhayes/index.html" target="_blank" rel="noopener">http://savannah.gatech.edu/people/mhayes/index.html</a></li></p><p><li>微软亚洲研究院研究员孙剑：<a href="http://research.microsoft.com/en-us/people/jiansun/" target="_blank" rel="noopener">http://research.microsoft.com/en-us/people/jiansun/</a></li></p><p><li>微软亚洲研究院研究员马毅：<a href="http://research.microsoft.com/en-us/people/mayi/" target="_blank" rel="noopener">http://research.microsoft.com/en-us/people/mayi/</a></li></p><p><li>英国哥伦比亚大学教授David Lowe: <a href="http://www.cs.ubc.ca/~lowe/" target="_blank" rel="noopener">http://www.cs.ubc.ca/~lowe/</a></li></p><p><li>英国爱丁堡大学教授Bob Fisher: <a href="http://homepages.inf.ed.ac.uk/rbf/" target="_blank" rel="noopener">http://homepages.inf.ed.ac.uk/rbf/</a></li></p><p><li>加州大学圣地亚哥分校教授Serge J.Belongie:<a href="http://cseweb.ucsd.edu/~sjb/" target="_blank" rel="noopener">http://cseweb.ucsd.edu/~sjb/</a></li></p><p><li>威斯康星大学教授Charles R.Dyer: <a href="http://pages.cs.wisc.edu/~dyer/" target="_blank" rel="noopener">http://pages.cs.wisc.edu/~dyer/</a></li></p><p><li>多伦多大学教授Allan.Jepson: <a href="http://www.cs.toronto.edu/~jepson/" target="_blank" rel="noopener">http://www.cs.toronto.edu/~jepson/</a></li></p><p><li>伦斯勒理工学院教授Qiang Ji: <a href="http://www.ecse.rpi.edu/~qji/" target="_blank" rel="noopener">http://www.ecse.rpi.edu/~qji/</a></li></p><p><li>CMU研究员Daniel Huber: <a href="http://www.ri.cmu.edu/person.html?person_id=123" target="_blank" rel="noopener">http://www.ri.cmu.edu/person.html?person_id=123</a></li></p><p><li>多伦多大学教授：David J.Fleet: <a href="http://www.cs.toronto.edu/~fleet/" target="_blank" rel="noopener">http://www.cs.toronto.edu/~fleet/</a></li></p><p><li>伦敦大学玛丽女王学院教授Andrea Cavallaro:<a href="http://www.eecs.qmul.ac.uk/~andrea/" target="_blank" rel="noopener">http://www.eecs.qmul.ac.uk/~andrea/</a></li></p><p><li>多伦多大学教授Kyros Kutulakos: <a href="http://www.cs.toronto.edu/~kyros/" target="_blank" rel="noopener">http://www.cs.toronto.edu/~kyros/</a></li></p><p><li>杜克大学教授Carlo Tomasi: <a href="http://www.cs.duke.edu/~tomasi/" target="_blank" rel="noopener">http://www.cs.duke.edu/~tomasi/</a></li></p><p><li>CMU教授Martial Hebert: <a href="http://www.cs.cmu.edu/~hebert/" target="_blank" rel="noopener">http://www.cs.cmu.edu/~hebert/</a></li></p><p><li>MIT助理教授Antonio Torralba: <a href="http://web.mit.edu/torralba/www/" target="_blank" rel="noopener">http://web.mit.edu/torralba/www/</a></li></p><p><li>马里兰大学研究员Yasel Yacoob: <a href="http://www.umiacs.umd.edu/users/yaser/" target="_blank" rel="noopener">http://www.umiacs.umd.edu/users/yaser/</a></li></p><p><li>康奈尔大学教授Ramin Zabih: <a href="http://www.cs.cornell.edu/~rdz/" target="_blank" rel="noopener">http://www.cs.cornell.edu/~rdz/</a></li></p><p><li>CMU博士田渊栋: <a href="http://www.cs.cmu.edu/~yuandong/" target="_blank" rel="noopener">http://www.cs.cmu.edu/~yuandong/</a></li></p><p><li>CMU副教授Srinivasa Narasimhan: <a href="http://www.cs.cmu.edu/~srinivas/" target="_blank" rel="noopener">http://www.cs.cmu.edu/~srinivas/</a></li></p><p><li>CMU大学ILIM实验室：<a href="http://www.cs.cmu.edu/~ILIM/" target="_blank" rel="noopener">http://www.cs.cmu.edu/~ILIM/</a></li></p><p><li>哥伦比亚大学教授Sheer K.Nayar: <a href="http://www.cs.columbia.edu/~nayar/" target="_blank" rel="noopener">http://www.cs.columbia.edu/~nayar/</a></li></p><p><li>三菱电子研究院研究员Fatih Porikli ：<a href="http://www.porikli.com/" target="_blank" rel="noopener">http://www.porikli.com/</a></li></p><p><li>康奈尔大学教授Daniel Huttenlocher：<a href="http://www.cs.cornell.edu/~dph/" target="_blank" rel="noopener">http://www.cs.cornell.edu/~dph/</a></li></p><p><li>南京大学教授周志华：<a href="http://cs.nju.edu.cn/zhouzh/index.htm" target="_blank" rel="noopener">http://cs.nju.edu.cn/zhouzh/index.htm</a></li></p><p><li>芝加哥丰田技术研究所助理教授Devi Parikh: <a href="http://ttic.uchicago.edu/~dparikh/index.html" target="_blank" rel="noopener">http://ttic.uchicago.edu/~dparikh/index.html</a></li></p><p><li>瑞士联邦理工学院博士后Helmut Grabner: <a href="http://www.vision.ee.ethz.ch/~hegrabne/#Short_CV" target="_blank" rel="noopener">http://www.vision.ee.ethz.ch/~hegrabne/#Short_CV</a></li></p><p><li>香港中文大学教授贾佳亚：<a href="http://www.cse.cuhk.edu.hk/~leojia/index.html" target="_blank" rel="noopener">http://www.cse.cuhk.edu.hk/~leojia/index.html</a></li></p><p><li>南洋理工大学副教授吴建鑫：<a href="http://c2inet.sce.ntu.edu.sg/Jianxin/index.html" target="_blank" rel="noopener">http://c2inet.sce.ntu.edu.sg/Jianxin/index.html</a></li></p><p><li>GE研究院研究员李关：<a href="http://www.cs.unc.edu/~lguan/" target="_blank" rel="noopener">http://www.cs.unc.edu/~lguan/</a></li></p><p><li>佐治亚理工学院教授Monson Hayes:<a href="http://savannah.gatech.edu/people/mhayes/" target="_blank" rel="noopener">http://savannah.gatech.edu/people/mhayes/</a></li></p><p><li>: <a href="http://pascallin.ecs.soton.ac.uk/challenges/VOC/" target="_blank" rel="noopener">http://pascallin.ecs.soton.ac.uk/challenges/VOC/</a></li></p><p><li>机器视觉开源处理库汇总：<a href="http://archive.cnblogs.com/a/2217609/" target="_blank" rel="noopener">http://archive.cnblogs.com/a/2217609/</a></li></p><p><li>布朗大学教授Benjamin Kimia: <a href="http://www.lems.brown.edu/kimia.html" target="_blank" rel="noopener">http://www.lems.brown.edu/kimia.html</a></li></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CV-相关内容&quot;&gt;&lt;a href=&quot;#CV-相关内容&quot; class=&quot;headerlink&quot; title=&quot;CV 相关内容&quot;&gt;&lt;/a&gt;CV 相关内容&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;以下链接是本人整理的关于计算机视觉（ComputerVision, CV）
      
    
    </summary>
    
      <category term="这个课题不好搞" scheme="https://lizhangyan.github.io/categories/%E8%BF%99%E4%B8%AA%E8%AF%BE%E9%A2%98%E4%B8%8D%E5%A5%BD%E6%90%9E/"/>
    
    
      <category term="计算机视觉" scheme="https://lizhangyan.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>六级翻译</title>
    <link href="https://lizhangyan.github.io/2017/12/14/%E5%85%AD%E7%BA%A7%E7%BF%BB%E8%AF%91/"/>
    <id>https://lizhangyan.github.io/2017/12/14/六级翻译/</id>
    <published>2017-12-14T02:39:57.000Z</published>
    <updated>2017-12-14T03:35:09.250Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/12/14/六级翻译/1.jpg" title="六级翻译"><a id="more"></a><h1 id="六级翻译"><a href="#六级翻译" class="headerlink" title="六级翻译"></a>六级翻译</h1><p>十二月份</p><h2 id="常考七大结构"><a href="#常考七大结构" class="headerlink" title="常考七大结构"></a>常考七大结构</h2><ul><li><p>民族类常见篇章结构</p><blockquote><p>XX民族是中国少数民族之一，有……人口，分布于……。XX民族有自己的语言……习俗为(穿着与文化等)……。最著名的节日是……。XX民族有自己独特的文化……XX民族擅长……</p><blockquote><p>比如-<strong>藏族是中国少数民族之一。</strong><br><strong>The Tibetan Nationality is one of the ethnic(种族) minorities(少数) in China.</strong></p></blockquote></blockquote></li><li><p>景点建筑常见篇章结构</p><blockquote><p>XX 位于中国某省某地方。有……年的历史，占地面积为……是中国最……的景点。XX始建于……朝代，当时用于……。XX已经被列为……，吸引了世界各地的游客。</p><blockquote><p>比如-<strong>景德镇被称为“中国瓷都”，已经有1700多年的历史。</strong><br><strong>Jingdezhen has a history of over 1,700 years, which is known as the capital of procelain in China.</strong></p></blockquote></blockquote></li><li><p>传统文化常见篇章结构</p><blockquote><p>中国XX，最早起源于……多年前的……时期。每年……前后，人们都要……，以营造……气氛。后来，在中国人眼中，……象征着……，在传统文化中……，已经成为……的象征符号。</p><blockquote><p>比如-<strong>中国灯笼，最早起源于1800多年前的西汉时期。</strong><br><strong>Chinese laterns first originated in Western Han Dynasty som 1,8000 years age.</strong></p></blockquote></blockquote></li><li><p>社会热点常见篇章结构</p><blockquote><p>XX现象是指XX，它在中国很常见，是因为XX。XX指出，到XX年，XX的数字将达到XX。</p><blockquote><p>比如-<strong>中国政府的独生子女政策是在1978年才实施的。</strong><br><strong>The Chinese Government’s One Child Policy was put into effect only in 1978.</strong></p></blockquote></blockquote></li><li><p>经济类常见结构篇章</p><blockquote><p>伴随着XX的发展，中国的经济形势XX。以XX为例，XX的发展是以XX为代价的。</p><blockquote><p>比如-<strong>信用卡是银行系统所创造出来的最便捷同时也是最危险的工具。</strong><br><strong>Credit cards are one of the most convenient devices ever created by the banking system, but, at the same time, one of the most dangerous.</strong></p></blockquote></blockquote></li><li><p>文学作品常见篇章结构</p><blockquote><p>《XX》是XX时期由XX编写。本书一共包括XX，主要讲述了XX。它体现了XX，是一部XX文学巨著。</p><blockquote><p>比如-<strong>《红楼梦》写于18世纪，是中国著名的古典小说</strong><br><strong>Written in the 18th century, <em>A Dream of Red Mansions</em> is a famous classical novel.</strong></p></blockquote></blockquote></li><li><p>节日类常见篇章结构</p><blockquote><p>XX节日是中国的传统节日，在农历X月X天，有X年的历史。在这一天，人们会XX，也会XX。</p><blockquote><p>比如-<strong>元宵节是在阴历的正月十五，猜灯谜是节日的重要部分。</strong><br><strong>The Lantern Festival falls on the 15th day of the 1st Lunar month. Guessing lantern riddles(谜语) is an essential part of the festival.</strong></p></blockquote></blockquote></li></ul><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><blockquote><p>新东方在线四六级</p><footer><strong>知乎</strong><cite><a href="https://zhuanlan.zhihu.com/p/26297873" target="_blank" rel="noopener">六级翻译常见结构</a></cite></footer></blockquote><h2 id="预测翻译话题"><a href="#预测翻译话题" class="headerlink" title="预测翻译话题"></a>预测翻译话题</h2><h3 id="东方明珠广播电视塔"><a href="#东方明珠广播电视塔" class="headerlink" title="东方明珠广播电视塔"></a>东方明珠广播电视塔</h3><blockquote><p><strong>东方明珠广播电视塔</strong>(the Oriental Pearl TV Tower)坐落于上海陆家嘴浦东园区。东方明珠东北是杨浦大桥，西南是南浦大桥，构成“二龙戏珠”的画面。这幅壮观的画面常年吸引着成千上万的游客。这座468米高的电视塔是世界上第三高的电视广播塔。整个电视塔建造在茂盛的绿草地上，像玉盘里的一颗珍珠一样闪闪发亮。这座超现代的电视塔将古老的概念，如球形的珍珠，和21世纪的技术、商业、娱乐、教育和会议设施相结合，真是很神奇。</p><blockquote><p>Located in Pudong Park in Lujiazui，Shanghai, <strong>the Oriental Pearl TV Tower</strong> with the Yangpu Bridge in the northeast and the Nanpu Bridge in the southwest, creates a picture of “two dragons playing with a pearl”. This magnificent scene attractsthousands of visitors all year long.This 468-meter-high tower is the world’s third highest TV andradio tower.The entire structure rests on rich green grassland and gives the appearance of apearl shining on a jade plate.It is amazing that this ultra-modern TV tower combines ancientconcepts such as the spherical pearls, with technology, commerce, recreation, educational andconference facilities of the 21st century.</p></blockquote></blockquote><h3 id="垃圾分类"><a href="#垃圾分类" class="headerlink" title="垃圾分类"></a>垃圾分类</h3><blockquote><p>随着人民生活水平和消费水平的提高，中国的垃圾问题日益严峻。很多城市被垃圾包围。面对日益增长的垃圾产量和环境状况的恶化。中国政府正在努力推行垃极分类(garbageclassification)的政策。垃圾分类是指将垃圾分为可回收利用和不可回收利用两类，要求人们将垃圾投放至不同的垃圾桶(trash can)，通过不同的清理、运输和回收方式，使之变成新的资源。它可以减少垃圾处理量，降低处理成本，减少土地资源的消耗，对社会、经济、生态三方面都有益。</p><blockquote><p>With the improvement of people’s living standardsand the increase of <strong>consumption level</strong>, the <strong>garbage problem</strong> in China becomes increasingly urgent(紧急的). Many cities are surrounded by garbage. Confronted with the growing garbage output and deteriorating environment, the Chinese government is implementing the policy of garbage classification with great effort. Garbage classification means dividing garbage into recyclable andunrecyclable, and requires people to put garbage into different trash cans so that it can become new resources through different ways of cleaning, transporting and recycling. It can reduce not only the amount of garbage that needs to be disposed, but also the deposing cost and the usage of land, benefiting our society, economy and environment.</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/12/14/六级翻译/1.jpg&quot; title=&quot;六级翻译&quot;&gt;
    
    </summary>
    
      <category term="考试" scheme="https://lizhangyan.github.io/categories/%E8%80%83%E8%AF%95/"/>
    
    
      <category term="六级" scheme="https://lizhangyan.github.io/tags/%E5%85%AD%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>python基础</title>
    <link href="https://lizhangyan.github.io/2017/12/13/python%E5%9F%BA%E7%A1%80/"/>
    <id>https://lizhangyan.github.io/2017/12/13/python基础/</id>
    <published>2017-12-13T11:47:07.000Z</published>
    <updated>2017-12-22T13:40:38.639Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/12/13/python基础/1.jpg" title="PYTHON"><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="在GNU-Linux下安装"><a href="#在GNU-Linux下安装" class="headerlink" title="在GNU/Linux下安装"></a>在GNU/Linux下安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; apt-get install python3</span><br></pre></td></tr></table></figure><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><p><li> 教育版的PyCharm</li></p><p><li> Vim + jedi-vim</li></p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>  <strong>注释</strong>是任何存在于<strong>#</strong>号右侧的文字，主要作用是写给读者看的笔记<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;hello world&apos;) # print 函数</span><br></pre></td></tr></table></figure></p><h2 id="字面常量"><a href="#字面常量" class="headerlink" title="字面常量"></a>字面常量</h2><p>  一个字面常量（Literal Constants）的例子是诸如5、1.23这样的数字，或者是如<code>这是一串文本</code> 或 <code>This is a string</code> 这样的文本。</p><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p><li> 整数 Integers</li></p><p><li> 浮点数 Floats</li></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>  一串字符串（String）是字符（Characters）的序列（Sequence）。<br>  字符串是不可变的。</p><h2 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h2><p><li> 单引号</li></p><p>  <code>&#39;Quote me on this&#39;</code></p><p><li> 双引号</li></p><p>  <code>&quot;What&#39;s your name?&quot;</code></p><p><li> 三引号</li></p><p>  用来指定多行字符串，可以在三引号之间自由换行。</p><h2 id="格式化方法"><a href="#格式化方法" class="headerlink" title="格式化方法"></a>格式化方法</h2><p>  使用<strong>format()</strong>方法从其他变量构建字符串。<br>  如，str_format.py:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">age = 20</span><br><span class="line">name = &apos;Swaroop&apos;</span><br><span class="line"></span><br><span class="line">print(&apos;&#123;0&#125; was &#123;1&#125; years old when he wrote this book&apos;.format(name,age))</span><br></pre></td></tr></table></figure><h2 id="转义序列"><a href="#转义序列" class="headerlink" title="转义序列"></a>转义序列</h2><p><li> 换行符<code>\n</code></li></p><p><li> 制表符<code>\t</code></li></p><p><li> 单引号<code>\&#39;</code></li></p><p>  <code>What\&#39;s your name?</code></p><p><li> 原始字符串</li></p><p>  未经特殊处理的字符串，比如转义序列，要在字符串前加<strong>r</strong>或<strong>R</strong>, 例如<br>    <code>r&quot;Newlines are indicated by \n&quot;</code></p><blockquote><p>使用正则表达式时应全程使用<strong>原始字符串</strong></p></blockquote><h2 id="变量-Veriables"><a href="#变量-Veriables" class="headerlink" title="变量 Veriables"></a>变量 Veriables</h2><blockquote><p>变量的值可以变化</p><h2 id="对象-Object"><a href="#对象-Object" class="headerlink" title="对象 Object"></a>对象 Object</h2><p>Python是<strong>强面向对象</strong>的，因为所有的一切都是对象，包括&lt;<em>数字、字符串与函数</em>.</p></blockquote><h2 id="逻辑行与物理行"><a href="#逻辑行与物理行" class="headerlink" title="逻辑行与物理行"></a>逻辑行与物理行</h2><p><li> Physical Line</li></p><blockquote><p>编写程序是所看到的内容</p><p><li> Logical Line<br>Python编辑器所看到的单个语句</li></p></blockquote>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一个物理行，两个逻辑行</span><br><span class="line">i = 5; print(i);</span><br><span class="line"></span><br><span class="line"># 两个物理行，两个逻辑行</span><br><span class="line">i = 5;</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><p><li> 显式行连接<br>如果有一行非常长的代码，可以用反斜杠将其拆分成多个物理行<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = &apos;This is a string, \</span><br><span class="line">This continues the string.&apos;</span><br></pre></td></tr></table></figure></li></p><p><li> 隐式行连接<br>逻辑行以括号开始。</li></p><h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><p><strong>空白区</strong>在Python中十分重要。逻辑行的开头留下空白区（空格或者制表符）用以确定行的缩进级别，并且确定语句分组。</p><h2 id="具有相同缩进的语句被称为块-block"><a href="#具有相同缩进的语句被称为块-block" class="headerlink" title="具有相同缩进的语句被称为块(block)"></a>具有相同缩进的语句被称为<strong>块(block)</strong></h2><h1 id="运算符与表达式"><a href="#运算符与表达式" class="headerlink" title="运算符与表达式"></a>运算符与表达式</h1><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><li> <code>+</code></li></p><p><li> <code>-</code></li></p><p><li> <code>&lt;li&gt;</code></li></p><p><li> <code>**</code> 乘方</li></p><p><li> <code>/</code></li></p><p><li> <code>//</code> 整除</li></p><blockquote><p>x 除以 y 并对结果向下取整</p></blockquote><p><li> <code>%</code></li></p><p><li> <code>&lt;&lt;</code> 左移</li></p><blockquote><p>二进制</p></blockquote><p><li> <code>&gt;&gt;</code> 右移</li></p><blockquote><p>二进制</p></blockquote><p><li> <code>&amp;</code> 按位与</li></p><p><li> <code>|</code> 按位或</li></p><p><li> <code>^</code> 按位异或</li></p><p><li> <code>~</code> 按位取反</li></p><p><li> <code>&lt;</code>, <code>&lt;=</code></li></p><p><li> <code>&gt;</code>, <code>&gt;=</code></li></p><p><li> <code>==</code>, <code>!=</code></li></p><p><li> <code>not</code>, <code>and</code>, <code>or</code></li></p><h2 id="数值运算与赋值的快捷方式"><a href="#数值运算与赋值的快捷方式" class="headerlink" title="数值运算与赋值的快捷方式"></a>数值运算与赋值的快捷方式</h2><p><li> <code>变量 = 变量 运算 表达式</code> –&gt; <code>变量 运算 = 表达式</code></li></p><p><li> 求值顺序</li></p><blockquote><p>最好使用<strong>圆括号</strong>进行分组</p></blockquote><p>  <li> <code>ambda</code>: Lambda 表达式<br>  </li><li> <code>if - else</code>: 条件表达式<br>  </li><li> <code>or</code><br>  </li><li> <code>and</code><br>  </li><li> <code>not x</code><br>  </li><li> <code>in</code>, <code>not in</code>, <code>is</code>, <code>is not</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>,<code>&gt;=</code>, <code>!=</code>,<code>==</code><br>  </li><li> <code>|</code><br>  </li><li> <code>^</code><br>  </li><li> <code>&amp;</code><br>  </li><li> <code>&lt;&lt;</code>, <code>&gt;&gt;</code><br>  </li><li> +, -<br>  </li><li> <code>&lt;li&gt;</code>, <code>/</code>, <code>//</code><br>  </li><li> <code>+x</code>,<code>-x</code>, <code>~x</code> :正、负、按位取反<br>  </li><li> <code>**</code><br>  </li><li> <code>x[index]</code>, <code>x[index:index]</code>, <code>x(arguments...)</code>, <code>x.attribute</code> :下标、切片、调用、属性引用<br>  </li><li> <code>(expressiongs...)</code>, <code>[expressions...]</code>, <code>{key:value...}</code>, <code>{expressions...}</code> : 显示绑定或数组、显示列表、显示字典、显示设置</li></p><h2 id="gt-上述优先级从下往上越来越高"><a href="#gt-上述优先级从下往上越来越高" class="headerlink" title="  &gt; 上述优先级从下往上越来越高"></a>  &gt; 上述优先级从下往上越来越高</h2><h1 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h1><p>Python中有三种控制流语句-<code>if</code>,<code>for</code> 和 <code>while</code>。</p><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a><strong>if</strong> 语句</h2><p><em>if</em> 语句用以检查条件：如果条件为真（True）</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">number = 23;</span><br><span class="line">guess = int(input(&apos;Enter an integer : &apos;))</span><br><span class="line"></span><br><span class="line">if guess == number:</span><br><span class="line">    print(&apos;Congratulations, you guessed it.&apos;)</span><br><span class="line">    print(&apos;(but you do not win any prizes!)&apos;)</span><br><span class="line">elif guess &lt; number:</span><br><span class="line">    print(&apos;No, it is a little higher than that&apos;)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;No, it is a little lower than that&apos;)</span><br><span class="line"></span><br><span class="line">print(&apos;Done&apos;)</span><br></pre></td></tr></table></figure><h2 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a><strong>while</strong> 语句</h2><p><em>while</em> 语句当条件为真时重复执行某块语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">number = 23</span><br><span class="line">running = True</span><br><span class="line"></span><br><span class="line">while running:</span><br><span class="line">    guess = int(input(&apos;Enter an integer : &apos;))</span><br><span class="line">    if guess == number:</span><br><span class="line">        print(&apos;Congratulations, you guess it.&apos;)</span><br><span class="line">        running = False</span><br><span class="line">    elif guess &lt;=number:</span><br><span class="line">        print(&apos;No, it is a little higher than that.&apos;)</span><br><span class="line">    else:</span><br><span class="line">        print(&apos;No, it is a little lower than that.&apos;)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;The while loop is over.&apos;)</span><br><span class="line"></span><br><span class="line">print(&apos;Done&apos;)</span><br></pre></td></tr></table></figure><h2 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a><strong>for</strong> 语句</h2><p><li>for…in</li><li> 语句会在一系列对象上进行迭代（Iterates）。</li></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in range(2, 5):</span><br><span class="line">    print(i)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;The for loop is over&apos;)</span><br></pre></td></tr></table></figure><blockquote><p><code>range()</code> 函数生成数字序列</p></blockquote><hr><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p><strong>函数</strong> 是指可重复使用的程序片段。通过关键词<strong><em>def</em></strong>来定义。</p><p><li> 案例一 无参函数</li></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def say_hello():</span><br><span class="line">    print(&apos;hello world&apos;)</span><br><span class="line"></span><br><span class="line">say_hello()</span><br><span class="line">say_hello()</span><br></pre></td></tr></table></figure><p><li> 案例二 带参函数</li></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def print_max(a, b):</span><br><span class="line">  if a &gt; b:</span><br><span class="line">      print(a, &apos;is maximum&apos;)</span><br><span class="line">  elif a == b:</span><br><span class="line">      print(a, &apos;is equal to&apos;, b)</span><br><span class="line">  else:</span><br><span class="line">      print(b, &apos;is maximum&apos;)</span><br><span class="line"></span><br><span class="line">print_max(3, 4)</span><br><span class="line"></span><br><span class="line">x = 5</span><br><span class="line">y = 7</span><br><span class="line">print_max(x, y)</span><br></pre></td></tr></table></figure><p><li> 案例三 局部变量</li></p><p>只在声明的函数内起作用<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = 50</span><br><span class="line"></span><br><span class="line">def func(x):</span><br><span class="line">    print(&apos;x is&apos;, x)</span><br><span class="line">    x = 2 # 局部变量</span><br><span class="line">    print(&apos;Changed local x to&apos;, x)</span><br><span class="line"></span><br><span class="line">func(x)</span><br><span class="line">print(&apos;x is still&apos;, x)</span><br></pre></td></tr></table></figure></p><p><li> global 语句</li></p><p>通过关键字<strong>global</strong>，确定变量是在最外面的代码块中定义的<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = 50</span><br><span class="line"></span><br><span class="line">def func():</span><br><span class="line">    global x # global关键字</span><br><span class="line"></span><br><span class="line">    print(&apos;x is&apos;,x)</span><br><span class="line">    x = 2</span><br><span class="line">    print(&apos;Changed global x to&apos;,x)</span><br><span class="line"></span><br><span class="line">func() # 此处没有传递变量</span><br><span class="line">print(&apos;Value of x is&apos;, x)</span><br></pre></td></tr></table></figure></p><p><li> 默认参数值</li></p><p>当用户不想提供此参数值时。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def say(message, times=1):</span><br><span class="line">  print(message * times)</span><br><span class="line"></span><br><span class="line">say(&apos;Hello&apos;)</span><br><span class="line">say(&apos;World&apos;, 5)</span><br></pre></td></tr></table></figure><p><li> 关键字参数 Keyword arguments</li></p><p>只希望对函数的某些参数进行指定。</p><blockquote><p>优点</p><blockquote><p><li> 不用考虑参数顺序</li></p><p><li> 只对我们希望赋予的参数赋值，只要其他的参数具有默认参数值</li></p></blockquote></blockquote>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def func(a, b=5, c=10):</span><br><span class="line">  print(&apos;a is&apos;, a, &apos;and b is&apos;, b, &apos;and c is&apos;, c)</span><br><span class="line"></span><br><span class="line">func(3, 7) # 赋值a=3,b=7,c是默认参数值</span><br><span class="line">func(25, c=24) # 赋值a=25,c=24,b是默认参数值</span><br><span class="line">func(c=50,a=100) # 赋值a=100,c=50,b是默认参数值，并且打乱参数顺序</span><br></pre></td></tr></table></figure><p><li> 可变参数</li></p><p>定义的函数里面有任意数量的变量，通过<strong>*</strong> 来实现</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def total(a=5, *numbers, **phonebook):</span><br><span class="line">  print(&apos;a&apos;, a)</span><br><span class="line"></span><br><span class="line">  # 遍历元组中所有项目</span><br><span class="line">  for single_item in numbers:</span><br><span class="line">      print(&apos;single_item&apos;, single_item)</span><br><span class="line"></span><br><span class="line">  # 遍历字典中所有项目</span><br><span class="line">  for first_part, second_part in phonebook.items():</span><br><span class="line">      print(first_part, second_part)</span><br><span class="line"></span><br><span class="line">print(total(10,1,2,3,Jack=1123,John=2231,Inge=1560))</span><br></pre></td></tr></table></figure><blockquote><p>一颗<strong>*</strong>表示元组(Tuple)<br>两颗<strong>**</strong>表示字典(Dictionary)</p></blockquote><p><li> return 语句</li></p><p>从函数中返回</p><p><li> <strong>DocStrings</strong></li></p><p><strong>文档字符串</strong>，更好的记录程序，并加易于理解</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def print_max(x, y):</span><br><span class="line">  &apos;&apos;&apos;Prints the maximum of two numbers.</span><br><span class="line"></span><br><span class="line">  The two values must be integers.&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">  x = int(x)</span><br><span class="line">  y = int(y)</span><br><span class="line"></span><br><span class="line">  if x &gt; y:</span><br><span class="line">      print(x, &apos;is maximum&apos;)</span><br><span class="line">  else:</span><br><span class="line">      print(y, &apos;is maximum&apos;)</span><br><span class="line"></span><br><span class="line">print_max(3, 5)</span><br><span class="line"></span><br><span class="line">print(print_max.__doc__)</span><br></pre></td></tr></table></figure><hr><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>复用函数。<br>一个模块可以被其他程序导入并运用其功能。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">print(&apos;The command line arguments are:&apos;)</span><br><span class="line">for i in sys.argv:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">print(&apos;\n\nThe PYTHONPATH is&apos;, sys.path, &apos;\n&apos;)</span><br></pre></td></tr></table></figure><blockquote><p><code>import sys</code>导入了sys模块</p></blockquote><h2 id="按字节码编译的-pyc文件"><a href="#按字节码编译的-pyc文件" class="headerlink" title="按字节码编译的.pyc文件"></a>按字节码编译的<strong>.pyc</strong>文件</h2><p>创建按字节码编译的(Byte-Compiled)文件，以.pyc作为扩展名，是Python的中间形式。</p><p><li> <strong>from…import</strong>语句</li></p><p>使用<code>from...import</code>导入模块，可以避免每次调用模块里函数都要输入模块名，<code>sys.argva</code>，但是最好使用<code>import</code>导入模块，可以避免名称冲突</p><p><li> 模块的 <code>__name__</code></li></p><p>用来确定模块是独立运行的还是被导入来运行的。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    print(&apos;This program is being run by itself&apos;)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;I am being imported from another module&apos;)</span><br></pre></td></tr></table></figure></p><h2 id="编写自己的模块"><a href="#编写自己的模块" class="headerlink" title="编写自己的模块"></a>编写自己的模块</h2><p>每个Python程序同时也是一个模块。</p><p><li> 建立模块<code>mymodule.py</code></li></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def say_hi():</span><br><span class="line">    print(&apos;Hi, this is mymodule speaking.&apos;)</span><br><span class="line"></span><br><span class="line">__version__ = &apos;0.1&apos;</span><br></pre></td></tr></table></figure><p><li> 引用模块<code>mymodule.py</code>，创建<code>mymodule_demo.py</code></li></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import mymodule</span><br><span class="line"></span><br><span class="line">mymodule.say_hi()</span><br><span class="line">print(&apos;Version&apos;, mymodule.__version__)</span><br></pre></td></tr></table></figure><blockquote><p>模块要与程序在同一目录下，或者放在sys.path所列出的其中一个目录下</p></blockquote><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>包（package）把模块组织起来。<br>包是指一个包含模块与一个特殊的<strong>__init__.py</strong>文件夹。<br>包的结构如图所示，<br><img src="/2017/12/13/python基础/packagestruct.jpg" title="包结构"></p><blockquote><p><code>world</code>为包名，其他文件夹、子文件夹为子包或模块</p></blockquote><hr><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>Python有四中内置的数据结构</p><blockquote><p><li> <strong><em>List</em></strong></li></p><p><li> <strong><em>Tuple</em></strong></li></p><p><li> <strong><em>Dictionary</em></strong></li></p><p><li> <strong><em>Set</em></strong></li></p></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p><strong>列表</strong> 是一种用于保存一系列有序项目的集合。用<code>[...]</code>括起来，可以对列表进行<strong><em>添加、移除或搜索</em></strong>操作。</p><p><li> 案例</li></p><p><code>ds_using_list.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># This is my shopping list</span><br><span class="line">shoplist = [&apos;apple&apos;, &apos;mango&apos;, &apos;carrot&apos;, &apos;banana&apos;]</span><br><span class="line"></span><br><span class="line">print(&apos;I have&apos;, len(shoplist), &apos;items to purchase&apos;)</span><br><span class="line"></span><br><span class="line">print(&apos;These items are:&apos;, end=&apos; &apos;)</span><br><span class="line">for item in shoplist:</span><br><span class="line">    print(item, end=&apos; &apos;)</span><br><span class="line"></span><br><span class="line">print(&apos;\nI also have to buy rice.&apos;)</span><br><span class="line">shoplist.append(&apos;rice&apos;)</span><br><span class="line">print(&apos;My shopping list is now&apos;, shoplist)</span><br><span class="line"></span><br><span class="line">print(&apos;I will sort my list now&apos;)</span><br><span class="line">shoplist.sort()</span><br><span class="line">print(&apos;Sorted shopping list is&apos;, shoplist)</span><br><span class="line"></span><br><span class="line">print(&apos;The first item I will buy is&apos;, shoplist[0])</span><br><span class="line">olditem = shoplist[0]</span><br><span class="line">del shoplist[0]</span><br><span class="line">print(&apos;I bought the&apos;, olditem)</span><br><span class="line">print(&apos;My shopping list is now&apos;, shoplist)</span><br></pre></td></tr></table></figure><blockquote><p>变量<code>shoplist</code>是一张购物清单。在<code>shoplist</code>中存储了一些字符串，也可以向其中添加任何类型的对象，包括数字，甚至其他列表。</p></blockquote><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p><strong>元组</strong> 将多个对象保存到一起，可以近似地看做列表，但是功能很少。元组类似于字符串，是不可变的。<br><strong>元组</strong> 是通过特别指定项目来定义的，形式<code>x = (...,...,...,)</code>，括号非必选，也可以<code>a = ...,...,...</code>。<br><strong>元组</strong> 通常用来保证某一语句或某一用户定义的函数可以安全地采用一组数值。</p><p><li> 案例</li></p><p><code>ds_using_tuple.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">zoo = (&apos;python&apos;, &apos;elephant&apos;, &apos;penguin&apos;)</span><br><span class="line">print(&apos;Number of animals in the zoo is&apos;, len(zoo))</span><br><span class="line"></span><br><span class="line">new_zoo = &apos;monkey&apos;, &apos;camel&apos;, zoo</span><br><span class="line">print(&apos;Number of cages in the new zoo is&apos;, len(new_zoo))</span><br><span class="line">print(&apos;All animal in new zoo are&apos;, new_zoo)</span><br><span class="line">print(&apos;Animals brought from old zoo are&apos;, new_zoo[2])</span><br><span class="line">print(&apos;Last animal brought from old zoo is&apos;, new_zoo[2][2])</span><br><span class="line">print(&apos;Number of animals in the new zoo is&apos;, len(new_zoo)-1+len(new_zoo[2]))</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Number of animals in the zoo is 3</span><br><span class="line">Number of cages in the new zoo is 3</span><br><span class="line">All animal in new zoo are (&apos;monkey&apos;, &apos;camel&apos;, (&apos;python&apos;, &apos;elephant&apos;, &apos;penguin&apos;))</span><br><span class="line">Animals brought from old zoo are (&apos;python&apos;, &apos;elephant&apos;, &apos;penguin&apos;)</span><br><span class="line">Last animal brought from old zoo is penguin</span><br><span class="line">Number of animals in the new zoo is 5</span><br></pre></td></tr></table></figure><blockquote><p><li> 元组也是一个序列。</li></p><p><li> 空元组由一对圆括号构成，就像<code>myempty = ()</code>。</li></p><p><li> 如果只有一个项目的元组，必须在项目后面加上逗号<code>,</code>，<code>singleton = (2, )</code>。</li></p></blockquote><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p><strong>字典</strong>就是键值对，就像地址簿，知道姓名就可以查找到地址，但是键值必须唯一。形式，<code>d = {key : value, key2 : value2}</code>。<br><strong>键值</strong>是不可变的对象。<br><strong>字典</strong>中的键值不会进行排序，只能在使用前进行排序。</p><p><li> 案例</li></p><p><code>ds_using_dict.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ab = &#123;</span><br><span class="line">    &apos;Swaroop&apos;: &apos;swaroop@swaroopch.com&apos;,</span><br><span class="line">    &apos;Larry&apos;: &apos;larry@wall.org&apos;,</span><br><span class="line">    &apos;Matsumoto&apos;: &apos;matz@ruby-lang.org&apos;,</span><br><span class="line">    &apos;Spammer&apos;: &apos;spammer@hotmail.com&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(&quot;Swaroop&apos;s address is&quot;, ab[&apos;Swaroop&apos;])</span><br><span class="line"></span><br><span class="line"># 删除一对键值-值配对</span><br><span class="line">del ab[&apos;Spammer&apos;]</span><br><span class="line"></span><br><span class="line">print(&apos;\nThere are &#123;&#125; contacts in the address-bok\n&apos;.format(len(ab)))</span><br><span class="line"></span><br><span class="line">for name, address in ab.items():</span><br><span class="line">    print(&apos;Contact &#123;&#125; at &#123;&#125;&apos;.format(name, address))</span><br><span class="line"></span><br><span class="line"># 添加一对键值-值配对</span><br><span class="line">ab[&apos;Guido&apos;] = &apos;guido@python.org&apos;</span><br><span class="line"></span><br><span class="line">if &apos;Guido&apos; in ab:</span><br><span class="line">  print(&quot;\nGuido&apos;s address is&quot;, ab[&apos;Guido&apos;])</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Swaroop&apos;s address is swaroop@swaroopch.com</span><br><span class="line"></span><br><span class="line">There are 3 contacts in the address-bok</span><br><span class="line"></span><br><span class="line">Contact Matsumoto at matz@ruby-lang.org</span><br><span class="line">Contact Larry at larry@wall.org</span><br><span class="line">Contact Swaroop at swaroop@swaroopch.com</span><br></pre></td></tr></table></figure><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p><strong>列表、元组和字符串</strong>都是序列(Sequence)的某种表现形式。<br><strong>序列</strong>的主要功能：<br>  <li> 资格测试 Membership Test<br>  </li><li> 索引操作 Indexing Operations</li></p><p><strong>切片</strong>: Slicing运算符，可以获得序列中的某一段。<br><strong>案例</strong><br><code>ds_seq.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">shoplist = [&apos;apple&apos;, &apos;mango&apos;, &apos;carrot&apos;, &apos;banana&apos;]</span><br><span class="line">name = &apos;swaroop&apos;</span><br><span class="line"></span><br><span class="line">print(&apos;Item 0 is&apos;,shoplist[0])</span><br><span class="line">print(&apos;Item -1 is&apos;, shoplist[-1])</span><br><span class="line"></span><br><span class="line">print(&apos;Character 0 is&apos;, name[0])</span><br><span class="line"></span><br><span class="line">print(&apos;Item 1 to 3 is&apos;, shoplist[1:3])</span><br><span class="line">print(&apos;Item 1 to -1 is&apos;, shoplist[1:-1])</span><br><span class="line">print(&apos;Item start to end is&apos;, shoplist[:])</span><br></pre></td></tr></table></figure><p><strong><em>输出</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Item 0 is apple</span><br><span class="line">Item -1 is banana</span><br><span class="line">Character 0 is s</span><br><span class="line">Item 1 to 3 is [&apos;mango&apos;, &apos;carrot&apos;]</span><br><span class="line">Item 1 to -1 is [&apos;mango&apos;, &apos;carrot&apos;]</span><br><span class="line">Item start to end is [&apos;apple&apos;, &apos;mango&apos;, &apos;carrot&apos;, &apos;banana&apos;]</span><br></pre></td></tr></table></figure><blockquote><p><li> 获取序列中的一个对象，可以用单个数字来，比如 <code>shoplist[0]</code>，也可以使用负数<code>shoplsit[-1]</code>，<strong>-1</strong>表示最右端的对象。</li></p><p><li> 获取连续的片断，开始和结束位置用<code>：</code>隔开，比如<code>shoplist[1:3]</code>，<strong>1</strong>表示开始位置，<strong>3</strong>表示结束时的位置，即获取的子序列为<code>1,2</code>。</li></p></blockquote><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p><strong>集合 Set</strong> 是简单对象的无序集合。<br>表示形式，<code>bri = set([&#39;brazil&#39;, &#39;russia&#39;, &#39;india&#39;])</code>。<br>基本操作参见数学里的集合操作。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>当创建一个对象并将其分配给某个变量时，变量只会<strong>查阅 Refer</strong>某个对象，也就是说变量名只是指向计算机内存中存储了相应对象的那一部分。又称为<strong>名称绑定 Binding</strong>给那一个对象。</p><p><strong>案例</strong><br><code>ds_reference.py</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;Simple Assignment&apos;)</span><br><span class="line">shoplist = [&apos;apple&apos;, &apos;mango&apos;, &apos;carrot&apos;, &apos;banana&apos;]</span><br><span class="line"># mylist 只是指向同一对象的另一种名称</span><br><span class="line">mylist = shoplist</span><br><span class="line"></span><br><span class="line">del shoplist[0]</span><br><span class="line"></span><br><span class="line">print(&apos;shoplist is&apos;, shoplist)</span><br><span class="line">print(&apos;mylist is&apos;, mylist)</span><br><span class="line"></span><br><span class="line">print(&apos;Copy by making a full slice&apos;)</span><br><span class="line"></span><br><span class="line">mylist = shoplist[:]</span><br><span class="line"></span><br><span class="line">del mylist[0]</span><br><span class="line"></span><br><span class="line">print(&apos;shoplist is&apos;, shoplist)</span><br><span class="line">print(&apos;mylist is&apos;, mylist)</span><br></pre></td></tr></table></figure></p><p><strong>输出</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Simple Assignment</span><br><span class="line">shoplist is [&apos;mango&apos;, &apos;carrot&apos;, &apos;banana&apos;]</span><br><span class="line">mylist is [&apos;mango&apos;, &apos;carrot&apos;, &apos;banana&apos;]</span><br><span class="line">Copy by making a full slice</span><br><span class="line">shoplist is [&apos;mango&apos;, &apos;carrot&apos;, &apos;banana&apos;]</span><br><span class="line">mylist is [&apos;carrot&apos;, &apos;banana&apos;]</span><br></pre></td></tr></table></figure><blockquote><p>如果想要创建一份诸如序列等复杂对象的副本，必须使用切片操作来制作副本。如果仅仅通过复制变量名，那么他们为同一引用。</p></blockquote><h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><p>如何用<strong><em>Python</em></strong>解决实际问题。</p><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><blockquote><p>一款可以备份所有重要文件的程序</p></blockquote><h2 id="Ayalysis"><a href="#Ayalysis" class="headerlink" title="Ayalysis"></a>Ayalysis</h2><blockquote><p><li> 需要备份的文件与目录应在一份列表中予以指定</li></p><p><li> 备份必须存储在一个主备份目录中</li></p><p><li> 备份文件将打包压缩成zip文件</li></p><p><li> zip压缩文件的文件名由当前日期和时间构成</li></p></blockquote><h2 id="Implementation-V1"><a href="#Implementation-V1" class="headerlink" title="Implementation V1"></a>Implementation V1</h2><p><strong>代码</strong><br><code>backup_v1.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 指定在同一个列表中</span><br><span class="line"># 例如在Windows下：</span><br><span class="line"># source = [&apos;&quot;C:\\My Documents&quot;&apos;, &apos;C:\\Code&apos;]</span><br><span class="line"># 又如在Mac OS x 与Linux下：</span><br><span class="line">source = [&apos;/home/starsea/workspace/python3/basic&apos;]</span><br><span class="line"># 如果字符串中包含空格，要先用双引号括起来</span><br><span class="line"></span><br><span class="line"># 2. 备份文件必须存储在主备份目录中</span><br><span class="line"># 例如在Windows下：</span><br><span class="line"># target_dir = &apos;E:\\Backup&apos;</span><br><span class="line"># 又如在Mac OS X 与Linux下：</span><br><span class="line">target_dir = &apos;/home/starsea/workspace/python3/basic/backup&apos;</span><br><span class="line"></span><br><span class="line"># 3. 备份文件将打包文件压缩成zip文件</span><br><span class="line"># 4. zip文件名由当前日期与时间构成</span><br><span class="line">target = target_dir + os.sep + time.strftime(&apos;%Y%m%d%H%M%S&apos;) + &apos;.zip&apos;</span><br><span class="line"></span><br><span class="line"># 如果目录不存在则创建</span><br><span class="line">if not os.path.exists(target_dir):</span><br><span class="line">    os.mkdir(target_dir)</span><br><span class="line"></span><br><span class="line"># 5.使用zip命令将文件打包成zip格式</span><br><span class="line">zip_command = &apos;zip -r &#123;0&#125; &#123;1&#125;&apos;.format(target, &apos; &apos;.join(source))</span><br><span class="line"># 运行备份</span><br><span class="line">print(&apos;Zip command is:&apos;)</span><br><span class="line">print(zip_command)</span><br><span class="line">print(&apos;Running:&apos;)</span><br><span class="line">if os.system(zip_command) == 0:</span><br><span class="line">    print(&apos;Successful backup to&apos;, target)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;Backup FAILED&apos;)</span><br></pre></td></tr></table></figure><h2 id="Implementation-V2"><a href="#Implementation-V2" class="headerlink" title="Implementation V2"></a>Implementation V2</h2><p>实现时间作为文件名，存储在以当前日期为名字的文件夹中</p><p><code>backup_v2.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">source = [&apos;./basic/&apos;]</span><br><span class="line"></span><br><span class="line">target_dir = &apos;/home/starsea/backup&apos;</span><br><span class="line"></span><br><span class="line">if not os.path.exists(target_dir):</span><br><span class="line">    os.mkdir(target_dir)</span><br><span class="line"></span><br><span class="line">today = target_dir + os.sep + time.strftime(&apos;%Y%m%d&apos;)</span><br><span class="line"></span><br><span class="line">now = time.strftime(&apos;%H%M%S&apos;)</span><br><span class="line"></span><br><span class="line">target = today + os.sep + now + &apos;.zip&apos;</span><br><span class="line"></span><br><span class="line">if not os.path.exists(today):</span><br><span class="line">    os.mkdir(today)</span><br><span class="line">    print(&apos;Successfully created directory&apos;, today)</span><br><span class="line"></span><br><span class="line">zip_command = &apos;zip -r &#123;0&#125; &#123;1&#125;&apos;.format(target, &apos; &apos;.join(source))</span><br><span class="line"></span><br><span class="line">print(&apos;Zip command is:&apos;)</span><br><span class="line">print(zip_command)</span><br><span class="line">if os.system(zip_command) == 0:</span><br><span class="line">    print(&apos;Successful backup to&apos;, target)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;Backup FAILED&apos;)</span><br></pre></td></tr></table></figure><h2 id="Implementation-V3"><a href="#Implementation-V3" class="headerlink" title="Implementation V3"></a>Implementation V3</h2><p>实现添加注释到文件名</p><p><code>backup_v3.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">source = [&apos;./basic&apos;]</span><br><span class="line"></span><br><span class="line">target_dir = &apos;/home/starsea/backup&apos;</span><br><span class="line"></span><br><span class="line">if not os.path.exists(target_dir):</span><br><span class="line">    os.mkdir(target_dir)</span><br><span class="line"></span><br><span class="line">today = target_dir + os.sep + time.strftime(&apos;%Y%m%d&apos;)</span><br><span class="line"></span><br><span class="line">now = time.strftime(&apos;%H%M%S&apos;)</span><br><span class="line"></span><br><span class="line">comment = input(&apos;Enter a comment --&gt;&apos;)</span><br><span class="line"></span><br><span class="line">if len(comment) == 0:</span><br><span class="line">    target = today + os.sep + now + &apos;.zip&apos;</span><br><span class="line">else:</span><br><span class="line">    target = today + os.sep + now + &apos;_&apos; + comment.replace(&apos; &apos;, &apos;_&apos;) + &apos;.zip&apos;</span><br><span class="line"></span><br><span class="line">if not os.path.exists(today):</span><br><span class="line">    os.mkdir(today)</span><br><span class="line">    print(&apos;Successful created directory&apos;, today)</span><br><span class="line"></span><br><span class="line">zip_command = &quot;zip -r &#123;0&#125; &#123;1&#125;&quot;.format(target, &apos; &apos;.join(source))</span><br><span class="line"></span><br><span class="line">print(&apos;Zip command is:&apos;)</span><br><span class="line">print(zip_command)</span><br><span class="line">print(&apos;Running:&apos;)</span><br><span class="line">if not os.system(zip_command) == 0:</span><br><span class="line">    print(&apos;Successful backup to&apos;, target)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;Backup FAILED&apos;)</span><br></pre></td></tr></table></figure><h2 id="Implementation-V4"><a href="#Implementation-V4" class="headerlink" title="Implementation V4"></a>Implementation V4</h2><p>更换<code>os.system()</code>为<code>zipfile.ZipFile()</code></p><p><code>backup_v4.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">import zipfile</span><br><span class="line"></span><br><span class="line">source = [&apos;./basic&apos;]</span><br><span class="line"></span><br><span class="line">target_dir = &apos;/home/starsea/backup&apos;</span><br><span class="line"></span><br><span class="line">if not os.path.exists(target_dir):</span><br><span class="line">    os.mkdir(target_dir)</span><br><span class="line"></span><br><span class="line">today = target_dir + os.sep + time.strftime(&apos;%Y%m%d&apos;)</span><br><span class="line"></span><br><span class="line">now = time.strftime(&apos;%H%M%S&apos;)</span><br><span class="line"></span><br><span class="line">comment = input(&apos;Enter a comment --&gt;&apos;)</span><br><span class="line"></span><br><span class="line">if len(comment) == 0:</span><br><span class="line">    target = today + os.sep + now + &apos;.zip&apos;</span><br><span class="line">else:</span><br><span class="line">    target = today + os.sep + now + &apos;_&apos; + comment.replace(&apos; &apos;, &apos;_&apos;) + &apos;.zip&apos;</span><br><span class="line"></span><br><span class="line">if not os.path.exists(today):</span><br><span class="line">    os.mkdir(today)</span><br><span class="line">    print(&apos;Successful created directory&apos;, today)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(&apos;Running:&apos;)</span><br><span class="line"></span><br><span class="line">with zipfile.ZipFile(target, mode=&apos;w&apos;) as zipf:</span><br><span class="line">    for filedir in source:</span><br><span class="line">        for files in os.listdir(filedir):</span><br><span class="line">            filepath = filedir + os.sep + files</span><br><span class="line">            print(&apos;add file &#123;0&#125; to &#123;1&#125;&apos;.format(filepath, target))</span><br><span class="line">            zipf.write(filepath)</span><br></pre></td></tr></table></figure><hr><h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><p><strong>类</strong>与<strong>对象</strong>是面向对象编程的两个主要方面。一个<strong>类 Class</strong>能够创建一种新的<strong>类型 Type</strong>，其中<strong>对象 Object</strong>就是类的<strong>实例 Instance</strong>。</p><blockquote><p>类包括：</p><p><li> 字段 Field</li></p><p><li> 方法 Method<br>统称为类的<b>属性 Attribute<b>。</b></b></li></p></blockquote><p><strong>类</strong>通过<code>class</code>关键字创建。</p><h2 id="self"><a href="#self" class="headerlink" title="self"></a>self</h2><p>类中的方法都有一个必须的参数<code>self</code>，不必为其赋值，Python会为其提供。<code>self</code>引用的是对象本身。</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>具体例子<br><code>oop_method.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class person:</span><br><span class="line">    def say_hi(self):</span><br><span class="line">        print(&apos;Hello, how are you?&apos;)</span><br><span class="line"></span><br><span class="line">p = person()</span><br><span class="line">p.say_hi()</span><br></pre></td></tr></table></figure><h3 id="init-方法"><a href="#init-方法" class="headerlink" title="__init__方法"></a><code>__init__</code>方法</h3><p><code>__init</code>有两个下划线<code>_</code>。<br><code>__init__</code>方法会在类的对象被实例化时立即运行，类似于JAVA的构造函数。<br>案例 <code>oop_init.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    def say_hi(self):</span><br><span class="line">        print(&apos;Hello, my name is&apos;, self.name)</span><br><span class="line"></span><br><span class="line">p = Person(&apos;Swarrop&apos;)</span><br><span class="line">p.say_hi()</span><br></pre></td></tr></table></figure><h3 id="类变量与对象变量"><a href="#类变量与对象变量" class="headerlink" title="类变量与对象变量"></a>类变量与对象变量</h3><p><li> <strong>类变量</strong>是共享的，可以被所有属于该类的实例访问。</li></p><p><li> <strong>对象变量</strong>由类的每一个独立的对象或实例所拥有。</li></p><p>案例 <code>oop_objvar.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">class Robot:</span><br><span class="line">    # Class variable</span><br><span class="line">    population = 0</span><br><span class="line"></span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line">        print(&quot;(Initializing &#123;&#125;)&quot;.format(self.name))</span><br><span class="line"></span><br><span class="line">        Robot.population += 1</span><br><span class="line"></span><br><span class="line">    def die(self):</span><br><span class="line">        print(&apos;&#123;&#125; is being destroyed!&apos;.format(self.name))</span><br><span class="line">        Robot.population -= 1</span><br><span class="line">        if Robot.population == 0:</span><br><span class="line">            print(&apos;&#123;&#125; was the last one.&apos;.format(self.name))</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;There are still &#123;:d&#125; robots working.&apos;.format(Robot.population))</span><br><span class="line"></span><br><span class="line">    def say_hi(self):</span><br><span class="line">        print(&apos;Greeting, my masters call me &#123;&#125;.&apos;.format(self.name))</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def how_many(cls):</span><br><span class="line">        print(&apos;We have &#123;:d&#125; robots.&apos;.format(cls.population))</span><br><span class="line"></span><br><span class="line">droid1 = Robot(&apos;R2-D2&apos;)</span><br><span class="line">droid1.say_hi()</span><br><span class="line">Robot.how_many()</span><br><span class="line"></span><br><span class="line">droid2 = Robot(&apos;C-3P0&apos;)</span><br><span class="line">droid2.say_hi()</span><br><span class="line">Robot.how_many()</span><br><span class="line"></span><br><span class="line">print(&apos;\nRobots can do some work here.\n&apos;)</span><br><span class="line"></span><br><span class="line">print(&quot;Robots have finised their work. So let&apos;s destroy them.&quot;)</span><br><span class="line">droid1.die()</span><br><span class="line">droid2.die()</span><br><span class="line"></span><br><span class="line">Robot.how_many()</span><br></pre></td></tr></table></figure><blockquote><p><code>population</code>为类变量，可以通过类名访问，<code>Robot.population</code><br>声明一个属于类的方法，使用<strong>装饰器 Decorator</strong>对方法进行标记。</p></blockquote><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>面向对象一大优点是通过<strong>继承 Inheritance</strong>实现代码的<strong>重用 Reuse</strong>。</p><p>案例 <code>oop_subclass.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">class SchoolMember:</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        print(&apos;(Initialized SchoolMember: &#123;&#125;)&apos;.format(self.name))</span><br><span class="line"></span><br><span class="line">    def tell(self):</span><br><span class="line">        print(&apos;Name: &#123;0&#125; Age: &#123;1&#125;&apos;.format(self.name, self.age), end = &apos; &apos;)</span><br><span class="line"></span><br><span class="line">class Teacher(SchoolMember):</span><br><span class="line">    def __init__(self, name, age, salary):</span><br><span class="line">        SchoolMember.__init__(self, name, age)</span><br><span class="line">        self.salary = salary</span><br><span class="line">        print(&apos;(Initialized Teacher: &#123;&#125;&apos;.format(self.name))</span><br><span class="line"></span><br><span class="line">    def tell(self):</span><br><span class="line">        SchoolMember.tell(self)</span><br><span class="line">        print(&apos;Salary: &#123;:d&#125;&apos;.format(self.salary))</span><br><span class="line"></span><br><span class="line">class Student(SchoolMember):</span><br><span class="line">    def __init__(self, name, age, marks):</span><br><span class="line">        SchoolMember.__init__(self, name, age)</span><br><span class="line">        self.marks = marks</span><br><span class="line">        print(&apos;(Intialized Student &#123;&#125;)&apos;.format(self.name))</span><br><span class="line"></span><br><span class="line">    def tell(self):</span><br><span class="line">        SchoolMember.tell(self)</span><br><span class="line">        print(&apos;Marks: &#123;:d&#125;&apos;.format(self.marks))</span><br><span class="line"></span><br><span class="line">t = Teacher(&apos;Mrs. Shrividya&apos;, 40, 30000)</span><br><span class="line">s = Student(&apos;Swaroop&apos;, 25, 75)</span><br><span class="line"></span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">members = [t, s]</span><br><span class="line"></span><br><span class="line">for member in members:</span><br><span class="line">    member.tell()</span><br></pre></td></tr></table></figure><blockquote><p><li> <code>SchoolMember</code>被称为<strong>基类 Base Class</strong>或者<strong>超类 Superclass</strong></li></p><p><li> <code>Teacher</code>和<code>Student</code>被称为<strong>派生类 Derived Classes</strong>或是<strong>子类 Subclass</strong>。</li></p><p><strong>多重继承 Multiple Inheritance</strong>，同时继承多个类</p></blockquote><hr><h1 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h1><p>主要的需求是获取用户的输入与输出和处理文件。</p><h2 id="用户输入内容"><a href="#用户输入内容" class="headerlink" title="用户输入内容"></a>用户输入内容</h2><p>案例 <code>io_input.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def reverse(text):</span><br><span class="line">    return text[::-1]</span><br><span class="line"></span><br><span class="line">def is_palindrome(text):</span><br><span class="line">    return text == reverse(text)</span><br><span class="line"></span><br><span class="line">something = input(&apos;Enter text: &apos;)</span><br><span class="line"></span><br><span class="line">if is_palindrome(something):</span><br><span class="line">    print(&apos;Yes, it is a palindrome&apos;)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;No, it is not a palindrome&apos;)</span><br></pre></td></tr></table></figure><blockquote><p><code>input()</code>函数接受一个字符串作为参数，<strong>回车键</strong>表示结束输入。</p></blockquote><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>通过创建一个属于<code>file</code>类的对象，可以通过方法<code>read(),readline(),write()</code>进行读写操作。最后要用<code>close()</code>方法关闭打开的文件。</p><p>案例 <code>io_using_file.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">poem = &apos;&apos;&apos;\</span><br><span class="line">Programming is fun</span><br><span class="line">When the work is done</span><br><span class="line">if you wanna make your work also fun:</span><br><span class="line">    use Python!</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">f = open(&apos;poem.txt&apos;, &apos;w&apos;)</span><br><span class="line"></span><br><span class="line">f.write(poem)</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = open(&apos;poem.txt&apos;)</span><br><span class="line">while True:</span><br><span class="line">    line = f.readline()</span><br><span class="line">    if len(line) == 0:</span><br><span class="line">        break</span><br><span class="line">    print(line, end=&apos;&apos;)</span><br><span class="line"></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><blockquote><p>每次使用完文件务必用<code>close()</code>方法关闭。</p><p><code>opencv(name, mode)</code>，mode可以有几种模式：</p><p><li> <code>r</code>，只读模式，默认模式</li></p><p><li> <code>w</code>, 写入模式</li></p><p><li> <code>a</code>, 追加模式</li></p><p><li> <code>rt, wt, at</code>， 文本模式</li></p><p><li> <code>rb, wb, ab</code>， 二进制模式</li></p></blockquote><h2 id="Pickle"><a href="#Pickle" class="headerlink" title="Pickle"></a>Pickle</h2><p>这是Python的一个标准模块，可以将对象<strong>持久化 Persistention</strong>。</p><p>案例 <code>io_pickle.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import pickle</span><br><span class="line"></span><br><span class="line">shoplistfile = &apos;shoplist.data&apos;</span><br><span class="line">shoplist = [&apos;apple&apos;, &apos;mango&apos;, &apos;carrot&apos;]</span><br><span class="line"></span><br><span class="line">f = open(shoplistfile, &apos;wb&apos;)</span><br><span class="line"></span><br><span class="line">pickle.dump(shoplist, f)</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">del shoplist</span><br><span class="line"></span><br><span class="line">f = open(shoplistfile, &apos;rb&apos;)</span><br><span class="line"></span><br><span class="line">storedlist = pickle.load(f)</span><br><span class="line"></span><br><span class="line">print(storedlist)</span><br></pre></td></tr></table></figure><blockquote><p>要用二进制的模式打开。</p></blockquote><h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><p>想要处理其它非英语字符，需要Unicode编码</p><p>案例 <code>io_using_utf-8.py</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># encoding=utf-8</span><br><span class="line">import io</span><br><span class="line"></span><br><span class="line">f = io.open(&apos;abc.txt&apos;, &apos;wt&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">f.write(u&apos;Imaging non-English languange here&apos;)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">text = io.open(&apos;abc.txt&apos;, encoding=&apos;utf-8&apos;).read()</span><br><span class="line">print(text)</span><br></pre></td></tr></table></figure></p><blockquote><p>需要在文件开头加上<code># encoding=utf-8</code>。</p></blockquote><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p>当程序发生错误时，会<strong>抛出 Raise</strong>异常。</p><p>案例 <code>exceptions_handle.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    text = input(&apos;Enter something --&gt;&apos;)</span><br><span class="line">except EOFError:</span><br><span class="line">    print(&apos;Why did you do an EOF on me?&apos;)</span><br><span class="line">except KeyboardInterrupt:</span><br><span class="line">    print(&apos;You cancelled the operation.&apos;)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;You entered&#123;&#125;&apos;.format(text))</span><br></pre></td></tr></table></figure><h2 id="手动抛出异常"><a href="#手动抛出异常" class="headerlink" title="手动抛出异常"></a>手动抛出异常</h2><p>通过<code>raise</code>语句抛出异常，具体方法是提供错误名或异常名以及要抛出异常的对象。<br>案例 <code>exceptions_raise.py</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class ShortInputException(Exception):</span><br><span class="line">    def __init__(self, length, atleast):</span><br><span class="line">        Exception.__init__(self)</span><br><span class="line">        self.length = length</span><br><span class="line">        self.atleast = atleast</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    text = input(&apos;Enter something --&gt;&apos;)</span><br><span class="line">    if len(text) &lt; 3:</span><br><span class="line">        raise ShortInputException(len(text), 3)</span><br><span class="line">except EOFError:</span><br><span class="line">    print(&apos;Why did you do an EOF on me?&apos;)</span><br><span class="line">except ShortInputException as ex:</span><br><span class="line">    print((&apos;ShortInputException: The input was &apos; + &apos;&#123;0&#125; long, expected at least &#123;1&#125;&apos;).format(ex.length, ex.atleast))</span><br><span class="line"></span><br><span class="line">else:</span><br><span class="line">    print(&apos;No exception was raised&apos;)</span><br></pre></td></tr></table></figure></p><h2 id="Try…Finally"><a href="#Try…Finally" class="headerlink" title="Try…Finally"></a>Try…Finally</h2><p>通常在<code>finally</code>里把打开的文件关闭。</p><p>案例 <code>exceptions_finally.py</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">f = None</span><br><span class="line">try:</span><br><span class="line">    f = open(&apos;poem.txt&apos;)</span><br><span class="line">    while True:</span><br><span class="line">        line = f.readline()</span><br><span class="line">        if len(line) == 0:</span><br><span class="line">            break</span><br><span class="line">        print(line, end=&apos;&apos;)</span><br><span class="line">        sys.stdout.flush()</span><br><span class="line">        print(&apos;Press ctrl+c now&apos;)</span><br><span class="line">        time.sleep(2)</span><br><span class="line">except IOError:</span><br><span class="line">    print(&apos;Could not find file poem.txt&apos;)</span><br><span class="line">except KeyboardInterrupt:</span><br><span class="line">    print(&apos;!! You cancelled the reading from the file.&apos;)</span><br><span class="line">finally:</span><br><span class="line">    if f:</span><br><span class="line">        f.close()</span><br><span class="line">    print(&apos;Cleaning up: Closed the file&apos;)</span><br></pre></td></tr></table></figure></p><blockquote><p><code>print()</code>方法后使用<code>sys.stout.flush()</code>可以立即打印到屏幕。</p></blockquote><h2 id="with"><a href="#with" class="headerlink" title="with"></a>with</h2><p>使用<code>with</code>语句打开文件，不用再在<code>finally</code>里面对文件进行关闭。<br>案例 <code>exceptions_using_with.py</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with open(&apos;poem.txt&apos;) as f:</span><br><span class="line">    for line in f:</span><br><span class="line">        print(line, end=&apos;&apos;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/12/13/python基础/1.jpg&quot; title=&quot;PYTHON&quot;&gt;
    
    </summary>
    
      <category term="就会这么点语言" scheme="https://lizhangyan.github.io/categories/%E5%B0%B1%E4%BC%9A%E8%BF%99%E4%B9%88%E7%82%B9%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="语言" scheme="https://lizhangyan.github.io/tags/%E8%AF%AD%E8%A8%80/"/>
    
      <category term="python" scheme="https://lizhangyan.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>六级作文模板</title>
    <link href="https://lizhangyan.github.io/2017/12/12/%E5%85%AD%E7%BA%A7%E4%BD%9C%E6%96%87%E6%A8%A1%E6%9D%BF/"/>
    <id>https://lizhangyan.github.io/2017/12/12/六级作文模板/</id>
    <published>2017-12-12T02:00:02.000Z</published>
    <updated>2017-12-14T02:45:27.735Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/12/12/六级作文模板/1.jpg" title="六级作文"><a id="more"></a><h3 id="万能模板句"><a href="#万能模板句" class="headerlink" title="万能模板句"></a>万能模板句</h3><p>引出相同观点</p><blockquote><ul><li><p>With the development of sicence and techology, more and more people believe that …</p></li><li><p>Many people insist that …</p></li><li><p>A lot of people seem to think that …</p></li></ul></blockquote><p>引出不同观点</p><blockquote><ul><li><p>People’s views on … vary from person to person. Some hold that …. However, others believe that…</p></li><li><p>Attitudes towards (drugs) vary from person to person.</p></li><li><p>There are different opinions among people as to …</p></li><li><p>Different people hold different attitudes towards (failure).</p></li><li><p>Just as the popular saying goes, “Every coin has two sides”. From one side, …. From the other side, … .</p></li></ul></blockquote><p>得出最终结论</p><blockquote><ul><li><p>Taking all these factors into consideration, we naturally come to the conclusion that …</p></li><li><p>Taking into account all these factors, we may reasonably come to the conclusion that …</p></li><li><p>Hence/Therefore, we’d better come to the conclusion that…</p></li><li><p>There is no doubt that (job-hopping) has its drawbacks as well as merits.</p></li><li><p>All in all, we cannot live without… But at the same time we must try to find out new ways to cope with the problems that would arise.</p></li></ul></blockquote><p>提出最终建议</p><blockquote><ul><li><p>It is high time that we put an end to the (trend).</p></li><li><p>It is time to the advice of … and to put special emphasis on the improvement of …</p></li><li><p>There is no doubt that enough concern must be paid to the problem of …</p></li><li><p>Obviously, … If we want to do something…, it is essential that…</p></li><li><p>Only in this way can we …</p></li><li><p>It must be realized that …</p></li></ul></blockquote><p>预示后果</p><blockquote><ul><li><p>Obviously, if we don’t control the problem, the chances are that… will lead us in danger.</p></li><li><p>No doubt, unless we take effective measures, it is very likely that…</p></li><li><p>It is urgent that immediate measure should be taken to stop the situation.</p></li></ul></blockquote><blockquote><p>新东方在线四六级</p><footer><strong>知乎</strong><cite><a href="https://www.zhihu.com/search?type=content&q=%E5%85%AD%E7%BA%A7%E4%BD%9C%E6%96%87%E6%A8%A1%E6%9D%BF" target="_blank" rel="noopener">六级作文模板话题</a></cite></footer></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/12/12/六级作文模板/1.jpg&quot; title=&quot;六级作文&quot;&gt;
    
    </summary>
    
      <category term="考试" scheme="https://lizhangyan.github.io/categories/%E8%80%83%E8%AF%95/"/>
    
    
      <category term="六级" scheme="https://lizhangyan.github.io/tags/%E5%85%AD%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>[原]VPS+Shadowsocks+Ubuntu+Chrome</title>
    <link href="https://lizhangyan.github.io/2017/10/18/%E5%8E%9F-VPS-Shadowsocks-Ubuntu-Chrome/"/>
    <id>https://lizhangyan.github.io/2017/10/18/原-VPS-Shadowsocks-Ubuntu-Chrome/</id>
    <published>2017-10-18T11:42:35.000Z</published>
    <updated>2017-12-13T09:39:06.890Z</updated>
    
    <content type="html"><![CDATA[<h1 id="待办"><a href="#待办" class="headerlink" title="待办"></a>待办</h1><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;待办&quot;&gt;&lt;a href=&quot;#待办&quot; class=&quot;headerlink&quot; title=&quot;待办&quot;&gt;&lt;/a&gt;待办&lt;/h1&gt;
    
    </summary>
    
      <category term="不会翻墙你好意思吗" scheme="https://lizhangyan.github.io/categories/%E4%B8%8D%E4%BC%9A%E7%BF%BB%E5%A2%99%E4%BD%A0%E5%A5%BD%E6%84%8F%E6%80%9D%E5%90%97/"/>
    
    
      <category term="VPS" scheme="https://lizhangyan.github.io/tags/VPS/"/>
    
      <category term="VPN" scheme="https://lizhangyan.github.io/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>[原]人脸识别中的rank-n 代表的意思</title>
    <link href="https://lizhangyan.github.io/2017/09/02/%E5%8E%9F-%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E4%B8%AD%E7%9A%84rank-n-%E4%BB%A3%E8%A1%A8%E7%9A%84%E6%84%8F%E6%80%9D/"/>
    <id>https://lizhangyan.github.io/2017/09/02/原-人脸识别中的rank-n-代表的意思/</id>
    <published>2017-09-02T03:05:13.000Z</published>
    <updated>2017-12-13T09:37:49.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rank-1"><a href="#Rank-1" class="headerlink" title="Rank-1"></a>Rank-1</h1><p>看一些论文总是在结果中看到rank-1，等等，但是就不知道什么意思，今天终于搞明白了，备注一下。<br><a id="more"></a></p><h1 id="意思"><a href="#意思" class="headerlink" title="意思"></a>意思</h1><p>rank 1， 就是第一次命中</p><p>rank k，就是在第k次以内命中</p><p>人脸识别中，就代表，与目标人脸，最相似的k个人脸中，成功命中（找到正确人脸）的概率（和）。</p><p>RANK曲线，一般又被称呼为CMC曲线。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Rank-1&quot;&gt;&lt;a href=&quot;#Rank-1&quot; class=&quot;headerlink&quot; title=&quot;Rank-1&quot;&gt;&lt;/a&gt;Rank-1&lt;/h1&gt;&lt;p&gt;看一些论文总是在结果中看到rank-1，等等，但是就不知道什么意思，今天终于搞明白了，备注一下。&lt;br&gt;
    
    </summary>
    
      <category term="这个课题不好搞" scheme="https://lizhangyan.github.io/categories/%E8%BF%99%E4%B8%AA%E8%AF%BE%E9%A2%98%E4%B8%8D%E5%A5%BD%E6%90%9E/"/>
    
    
      <category term="人脸识别" scheme="https://lizhangyan.github.io/tags/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>[原]统计学习方法笔记（二）</title>
    <link href="https://lizhangyan.github.io/2017/05/26/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://lizhangyan.github.io/2017/05/26/统计学习方法（二）/</id>
    <published>2017-05-26T01:27:26.000Z</published>
    <updated>2017-12-14T02:45:38.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="统计学习方法"><a href="#统计学习方法" class="headerlink" title="统计学习方法"></a>统计学习方法</h1><p>大部分内容总结自<strong>李航</strong>博士的<strong><em>统计学习方法</em></strong></p><p>课件：<a href="http://download.csdn.net/detail/u012610276/9850578" target="_blank" rel="noopener">统计学习方法课件</a></p><h2 id="2-感知机"><a href="#2-感知机" class="headerlink" title="2.感知机"></a>2.感知机</h2><p><strong><em>Define:</em></strong>它是一个二分类的线性分类模型，其输入为实例的特征向量，输出为实例的类别，取<strong>{+1，-1}</strong>。</p><h3 id="2-1感知机模型"><a href="#2-1感知机模型" class="headerlink" title="2.1感知机模型"></a>2.1感知机模型</h3><a id="more"></a><p>感知机是一个判别模型，所以它有自己的决策函数：</p><p><span class="MathJax_Preview"></span><div class="MathJax_Display" role="textbox" aria-readonly="true" style="text-align: center;"><span class="MathJax" id="MathJax-Element-1654-Frame"><nobr><span class="math" id="MathJax-Span-20751" style="width: 11.547em; display: inline-block;"><span style="display: inline-block; position: relative; width: 9.379em; height: 0px; font-size: 123%;"><span style="position: absolute; clip: rect(1.358em 1000em 2.713em -0.431em); top: -2.274em; left: 0.003em;"><span class="mrow" id="MathJax-Span-20752"><span class="mi" id="MathJax-Span-20753" style="font-family: MathJax_Math-italic;">f<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.057em;"></span></span><span class="mo" id="MathJax-Span-20754" style="font-family: MathJax_Main;">(</span><span class="mi" id="MathJax-Span-20755" style="font-family: MathJax_Math-italic;">x</span><span class="mo" id="MathJax-Span-20756" style="font-family: MathJax_Main;">)</span><span class="mo" id="MathJax-Span-20757" style="font-family: MathJax_Main; padding-left: 0.274em;">=</span><span class="mi" id="MathJax-Span-20758" style="font-family: MathJax_Math-italic; padding-left: 0.274em;">s</span><span class="mi" id="MathJax-Span-20759" style="font-family: MathJax_Math-italic;">i</span><span class="mi" id="MathJax-Span-20760" style="font-family: MathJax_Math-italic;">g<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mi" id="MathJax-Span-20761" style="font-family: MathJax_Math-italic;">n</span><span class="mo" id="MathJax-Span-20762" style="font-family: MathJax_Main;">(</span><span class="mi" id="MathJax-Span-20763" style="font-family: MathJax_Math-italic;">w</span><span class="mo" id="MathJax-Span-20764" style="font-family: MathJax_Main; padding-left: 0.22em;">⋅</span><span class="mi" id="MathJax-Span-20765" style="font-family: MathJax_Math-italic; padding-left: 0.22em;">x</span><span class="mo" id="MathJax-Span-20766" style="font-family: MathJax_Main; padding-left: 0.22em;">+</span><span class="mi" id="MathJax-Span-20767" style="font-family: MathJax_Math-italic; padding-left: 0.22em;">b</span><span class="mo" id="MathJax-Span-20768" style="font-family: MathJax_Main;">)</span></span><span style="display: inline-block; width: 0px; height: 2.279em;"></span></span></span><span style="border-left-width: 0.003em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.337em; vertical-align: -0.397em;"></span></span></nobr></span></div><script type="math/tex; mode=display" id="MathJax-Element-1654">f(x)=sign(w \cdot x+b)</script></p><p><strong>特征空间：</strong><span class="MathJax_Preview"></span><div class="MathJax_Display" role="textbox" aria-readonly="true" style="text-align: center;"><span class="MathJax" id="MathJax-Element-1655-Frame"><nobr><span class="math" id="MathJax-Span-20769" style="width: 7.482em; display: inline-block;"><span style="display: inline-block; position: relative; width: 6.073em; height: 0px; font-size: 123%;"><span style="position: absolute; clip: rect(1.412em 1000em 2.659em -0.485em); top: -2.274em; left: 0.003em;"><span class="mrow" id="MathJax-Span-20770"><span class="mi" id="MathJax-Span-20771" style="font-family: MathJax_Math-italic;">χ</span><span class="mo" id="MathJax-Span-20772" style="font-family: MathJax_Main; padding-left: 0.274em;">⊆</span><span class="msubsup" id="MathJax-Span-20773" style="padding-left: 0.274em;"><span style="display: inline-block; position: relative; width: 1.249em; height: 0px;"><span style="position: absolute; clip: rect(1.412em 1000em 2.442em -0.431em); top: -2.274em; left: 0.003em;"><span class="mi" id="MathJax-Span-20774" style="font-family: MathJax_Math-italic;">R</span><span style="display: inline-block; width: 0px; height: 2.279em;"></span></span><span style="position: absolute; top: -2.707em; left: 0.762em;"><span class="mi" id="MathJax-Span-20775" style="font-size: 70.7%; font-family: MathJax_Math-italic;">n</span><span style="display: inline-block; width: 0px; height: 2.279em;"></span></span></span></span><span class="mo" id="MathJax-Span-20776" style="font-family: MathJax_Main;">,</span><span class="mi" id="MathJax-Span-20777" style="font-family: MathJax_Math-italic; padding-left: 0.165em;">x</span><span class="mo" id="MathJax-Span-20778" style="font-family: MathJax_Main; padding-left: 0.274em;">⊆</span><span class="mi" id="MathJax-Span-20779" style="font-family: MathJax_Math-italic; padding-left: 0.274em;">χ</span></span><span style="display: inline-block; width: 0px; height: 2.279em;"></span></span></span><span style="border-left-width: 0.003em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.27em; vertical-align: -0.33em;"></span></span></nobr></span></div><script type="math/tex; mode=display" id="MathJax-Element-1655">\chi \subseteq R^n, x \subseteq \chi</script></p><p><strong>输出空间：</strong><span class="MathJax_Preview"></span><div class="MathJax_Display" role="textbox" aria-readonly="true" style="text-align: center;"><span class="MathJax" id="MathJax-Element-1656-Frame"><nobr><span class="math" id="MathJax-Span-20780" style="width: 5.911em; display: inline-block;"><span style="display: inline-block; position: relative; width: 4.772em; height: 0px; font-size: 123%;"><span style="position: absolute; clip: rect(1.466em 1000em 2.659em -0.485em); top: -2.274em; left: 0.003em;"><span class="mrow" id="MathJax-Span-20781"><span class="mi" id="MathJax-Span-20782" style="font-family: MathJax_Math-italic;">y<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mo" id="MathJax-Span-20783" style="font-family: MathJax_Main; padding-left: 0.274em;">=</span><span class="texatom" id="MathJax-Span-20784" style="padding-left: 0.274em;"><span class="mrow" id="MathJax-Span-20785"><span class="mo" id="MathJax-Span-20786" style="font-family: MathJax_Main;">+</span><span class="mn" id="MathJax-Span-20787" style="font-family: MathJax_Main;">1</span><span class="mo" id="MathJax-Span-20788" style="font-family: MathJax_Main;">,</span><span class="mo" id="MathJax-Span-20789" style="font-family: MathJax_Main; padding-left: 0.165em;">−</span><span class="mn" id="MathJax-Span-20790" style="font-family: MathJax_Main;">1</span></span></span></span><span style="display: inline-block; width: 0px; height: 2.279em;"></span></span></span><span style="border-left-width: 0.003em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.203em; vertical-align: -0.33em;"></span></span></nobr></span></div><script type="math/tex; mode=display" id="MathJax-Element-1656">y={+1,-1}</script></p><p><strong>权值：</strong><span class="MathJax_Preview"></span><div class="MathJax_Display" role="textbox" aria-readonly="true" style="text-align: center;"><span class="MathJax" id="MathJax-Element-1657-Frame"><nobr><span class="math" id="MathJax-Span-20791" style="width: 4.068em; display: inline-block;"><span style="display: inline-block; position: relative; width: 3.309em; height: 0px; font-size: 123%;"><span style="position: absolute; clip: rect(1.412em 1000em 2.604em -0.485em); top: -2.274em; left: 0.003em;"><span class="mrow" id="MathJax-Span-20792"><span class="mi" id="MathJax-Span-20793" style="font-family: MathJax_Math-italic;">w</span><span class="mo" id="MathJax-Span-20794" style="font-family: MathJax_Main; padding-left: 0.274em;">⊆</span><span class="msubsup" id="MathJax-Span-20795" style="padding-left: 0.274em;"><span style="display: inline-block; position: relative; width: 1.249em; height: 0px;"><span style="position: absolute; clip: rect(1.412em 1000em 2.442em -0.431em); top: -2.274em; left: 0.003em;"><span class="mi" id="MathJax-Span-20796" style="font-family: MathJax_Math-italic;">R</span><span style="display: inline-block; width: 0px; height: 2.279em;"></span></span><span style="position: absolute; top: -2.707em; left: 0.762em;"><span class="mi" id="MathJax-Span-20797" style="font-size: 70.7%; font-family: MathJax_Math-italic;">n</span><span style="display: inline-block; width: 0px; height: 2.279em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.279em;"></span></span></span><span style="border-left-width: 0.003em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.203em; vertical-align: -0.263em;"></span></span></nobr></span></div><script type="math/tex; mode=display" id="MathJax-Element-1657">w \subseteq R^n</script></p><p><strong>偏置：</strong><span class="MathJax_Preview"></span><div class="MathJax_Display" role="textbox" aria-readonly="true" style="text-align: center;"><span class="MathJax" id="MathJax-Element-1658-Frame"><nobr><span class="math" id="MathJax-Span-20798" style="width: 3.092em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.496em; height: 0px; font-size: 123%;"><span style="position: absolute; clip: rect(1.412em 1000em 2.604em -0.431em); top: -2.274em; left: 0.003em;"><span class="mrow" id="MathJax-Span-20799"><span class="mi" id="MathJax-Span-20800" style="font-family: MathJax_Math-italic;">b</span><span class="mo" id="MathJax-Span-20801" style="font-family: MathJax_Main; padding-left: 0.274em;">⊆</span><span class="mi" id="MathJax-Span-20802" style="font-family: MathJax_Math-italic; padding-left: 0.274em;">R</span></span><span style="display: inline-block; width: 0px; height: 2.279em;"></span></span></span><span style="border-left-width: 0.003em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.137em; vertical-align: -0.263em;"></span></span></nobr></span></div><script type="math/tex; mode=display" id="MathJax-Element-1658">b \subseteq R</script></p><p><strong>sign表示符号函数：</strong><span class="MathJax_Preview"></span><div class="MathJax_Display" role="textbox" aria-readonly="true" style="text-align: center;"><span class="MathJax" id="MathJax-Element-1659-Frame"><nobr><span class="math" id="MathJax-Span-20803" style="width: 13.173em; display: inline-block;"><span style="display: inline-block; position: relative; width: 10.68em; height: 0px; font-size: 123%;"><span style="position: absolute; clip: rect(1.683em 1000em 4.447em -0.431em); top: -3.304em; left: 0.003em;"><span class="mrow" id="MathJax-Span-20804"><span class="mi" id="MathJax-Span-20805" style="font-family: MathJax_Math-italic;">s</span><span class="mi" id="MathJax-Span-20806" style="font-family: MathJax_Math-italic;">i</span><span class="mi" id="MathJax-Span-20807" style="font-family: MathJax_Math-italic;">g<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.003em;"></span></span><span class="mi" id="MathJax-Span-20808" style="font-family: MathJax_Math-italic;">n</span><span class="mo" id="MathJax-Span-20809" style="font-family: MathJax_Main;">(</span><span class="mi" id="MathJax-Span-20810" style="font-family: MathJax_Math-italic;">x</span><span class="mo" id="MathJax-Span-20811" style="font-family: MathJax_Main;">)</span><span class="mo" id="MathJax-Span-20812" style="font-family: MathJax_Main; padding-left: 0.274em;">=</span><span class="mrow" id="MathJax-Span-20813" style="padding-left: 0.274em;"><span class="mo" id="MathJax-Span-20814" style="vertical-align: 0.003em; padding-left: 0.274em;"><span style="font-family: MathJax_Size3;">{</span></span><span class="mtable" id="MathJax-Span-20815" style="padding-right: 0.165em; padding-left: 0.165em;"><span style="display: inline-block; position: relative; width: 4.827em; height: 0px;"><span style="position: absolute; clip: rect(2.659em 1000em 5.043em -0.431em); top: -4.008em; left: 0.003em;"><span style="display: inline-block; position: relative; width: 1.52em; height: 0px;"><span style="position: absolute; clip: rect(1.466em 1000em 2.659em -0.431em); top: -2.816em; left: 0.003em;"><span class="mtd" id="MathJax-Span-20816"><span class="mrow" id="MathJax-Span-20817"><span class="mo" id="MathJax-Span-20818" style="font-family: MathJax_Main;">+</span><span class="mn" id="MathJax-Span-20819" style="font-family: MathJax_Main;">1</span><span class="mo" id="MathJax-Span-20820" style="font-family: MathJax_Main;">,</span></span></span><span style="display: inline-block; width: 0px; height: 2.279em;"></span></span><span style="position: absolute; clip: rect(1.466em 1000em 2.659em -0.377em); top: -1.623em; left: 0.003em;"><span class="mtd" id="MathJax-Span-20826"><span class="mrow" id="MathJax-Span-20827"><span class="mo" id="MathJax-Span-20828" style="font-family: MathJax_Main;">−</span><span class="mn" id="MathJax-Span-20829" style="font-family: MathJax_Main;">1</span><span class="mo" id="MathJax-Span-20830" style="font-family: MathJax_Main;">,</span></span></span><span style="display: inline-block; width: 0px; height: 2.279em;"></span></span></span><span style="display: inline-block; width: 0px; height: 4.014em;"></span></span><span style="position: absolute; clip: rect(2.659em 1000em 4.881em -0.431em); top: -4.008em; left: 2.496em;"><span style="display: inline-block; position: relative; width: 2.333em; height: 0px;"><span style="position: absolute; clip: rect(1.466em 1000em 2.604em -0.431em); top: -2.816em; left: 0.003em;"><span class="mtd" id="MathJax-Span-20821"><span class="mrow" id="MathJax-Span-20822"><span class="mi" id="MathJax-Span-20823" style="font-family: MathJax_Math-italic;">x</span><span class="mo" id="MathJax-Span-20824" style="font-family: MathJax_Main; padding-left: 0.274em;">≥</span><span class="mn" id="MathJax-Span-20825" style="font-family: MathJax_Main; padding-left: 0.274em;">0</span></span></span><span style="display: inline-block; width: 0px; height: 2.279em;"></span></span><span style="position: absolute; clip: rect(1.466em 1000em 2.496em -0.431em); top: -1.623em; left: 0.003em;"><span class="mtd" id="MathJax-Span-20831"><span class="mrow" id="MathJax-Span-20832"><span class="mi" id="MathJax-Span-20833" style="font-family: MathJax_Math-italic;">x</span><span class="mo" id="MathJax-Span-20834" style="font-family: MathJax_Main; padding-left: 0.274em;">&lt;</span><span class="mn" id="MathJax-Span-20835" style="font-family: MathJax_Main; padding-left: 0.274em;">0</span></span></span><span style="display: inline-block; width: 0px; height: 2.279em;"></span></span></span><span style="display: inline-block; width: 0px; height: 4.014em;"></span></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 3.309em;"></span></span></span><span style="border-left-width: 0.003em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 3.07em; vertical-align: -1.263em;"></span></span></nobr></span></div><script type="math/tex; mode=display" id="MathJax-Element-1659">sign(x)=\begin{cases}+1,&amp;x\geq0\-1,&amp;x<0\\ \end{cases}</script></p><p>感知机是一种线性分类模型，所以它有自己的几何解释：</p><p><strong>线性方程：</strong><span class="MathJax_Preview"></span><div class="MathJax_Display" role="textbox" aria-readonly="true" style="text-align: center;"><span class="MathJax" id="MathJax-Element-1660-Frame"><nobr><span class="math" id="MathJax-Span-20836" style="width: 6.615em; display: inline-block;"><span style="display: inline-block; position: relative; width: 5.369em; height: 0px; font-size: 123%;"><span style="position: absolute; clip: rect(1.412em 1000em 2.55em -0.485em); top: -2.274em; left: 0.003em;"><span class="mrow" id="MathJax-Span-20837"><span class="mi" id="MathJax-Span-20838" style="font-family: MathJax_Math-italic;">w</span><span class="mo" id="MathJax-Span-20839" style="font-family: MathJax_Main; padding-left: 0.22em;">⋅</span><span class="mi" id="MathJax-Span-20840" style="font-family: MathJax_Math-italic; padding-left: 0.22em;">x</span><span class="mo" id="MathJax-Span-20841" style="font-family: MathJax_Main; padding-left: 0.22em;">+</span><span class="mi" id="MathJax-Span-20842" style="font-family: MathJax_Math-italic; padding-left: 0.22em;">b</span><span class="mo" id="MathJax-Span-20843" style="font-family: MathJax_Main; padding-left: 0.274em;">=</span><span class="mn" id="MathJax-Span-20844" style="font-family: MathJax_Main; padding-left: 0.274em;">0</span></span><span style="display: inline-block; width: 0px; height: 2.279em;"></span></span></span><span style="border-left-width: 0.003em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.07em; vertical-align: -0.197em;"></span></span></nobr></span></div><script type="math/tex; mode=display" id="MathJax-Element-1660">w \cdot x +b = 0</script></p><p>这对应于空间中的一个超平面<span class="MathJax_Preview"></span><span class="MathJax" id="MathJax-Element-1661-Frame" role="textbox" aria-readonly="true"><nobr><span class="math" id="MathJax-Span-20845" style="width: 0.87em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.707em; height: 0px; font-size: 123%;"><span style="position: absolute; clip: rect(1.412em 1000em 2.442em -0.431em); top: -2.274em; left: 0.003em;"><span class="mrow" id="MathJax-Span-20846"><span class="mi" id="MathJax-Span-20847" style="font-family: MathJax_Math-italic;">S<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.057em;"></span></span></span><span style="display: inline-block; width: 0px; height: 2.279em;"></span></span></span><span style="border-left-width: 0.003em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.003em; vertical-align: -0.063em;"></span></span></nobr></span><script type="math/tex" id="MathJax-Element-1661">S</script>,<span class="MathJax_Preview"></span><span class="MathJax" id="MathJax-Element-1662-Frame" role="textbox" aria-readonly="true"><nobr><span class="math" id="MathJax-Span-20848" style="width: 0.87em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.707em; height: 0px; font-size: 123%;"><span style="position: absolute; clip: rect(1.683em 1000em 2.442em -0.485em); top: -2.274em; left: 0.003em;"><span class="mrow" id="MathJax-Span-20849"><span class="mi" id="MathJax-Span-20850" style="font-family: MathJax_Math-italic;">w</span></span><span style="display: inline-block; width: 0px; height: 2.279em;"></span></span></span><span style="border-left-width: 0.003em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 0.67em; vertical-align: -0.063em;"></span></span></nobr></span><script type="math/tex" id="MathJax-Element-1662">w</script>是超平面的法向量，<span class="MathJax_Preview"></span><span class="MathJax" id="MathJax-Element-1663-Frame" role="textbox" aria-readonly="true"><nobr><span class="math" id="MathJax-Span-20851" style="width: 0.545em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.436em; height: 0px; font-size: 123%;"><span style="position: absolute; clip: rect(1.412em 1000em 2.442em -0.431em); top: -2.274em; left: 0.003em;"><span class="mrow" id="MathJax-Span-20852"><span class="mi" id="MathJax-Span-20853" style="font-family: MathJax_Math-italic;">b</span></span><span style="display: inline-block; width: 0px; height: 2.279em;"></span></span></span><span style="border-left-width: 0.003em; border-left-style: solid; display: inline-block; overflow: hidden; width: 0px; height: 1.003em; vertical-align: -0.063em;"></span></span></nobr></span><script type="math/tex" id="MathJax-Element-1663">b</script>是超平面的截距</p><img src="/2017/05/26/统计学习方法（二）/1.png"><h3 id="2-2感知机学习策略"><a href="#2-2感知机学习策略" class="headerlink" title="2.2感知机学习策略"></a>2.2感知机学习策略</h3><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;统计学习方法&quot;&gt;&lt;a href=&quot;#统计学习方法&quot; class=&quot;headerlink&quot; title=&quot;统计学习方法&quot;&gt;&lt;/a&gt;统计学习方法&lt;/h1&gt;&lt;p&gt;大部分内容总结自&lt;strong&gt;李航&lt;/strong&gt;博士的&lt;strong&gt;&lt;em&gt;统计学习方法&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;课件：&lt;a href=&quot;http://download.csdn.net/detail/u012610276/9850578&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;统计学习方法课件&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-感知机&quot;&gt;&lt;a href=&quot;#2-感知机&quot; class=&quot;headerlink&quot; title=&quot;2.感知机&quot;&gt;&lt;/a&gt;2.感知机&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Define:&lt;/em&gt;&lt;/strong&gt;它是一个二分类的线性分类模型，其输入为实例的特征向量，输出为实例的类别，取&lt;strong&gt;{+1，-1}&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&quot;2-1感知机模型&quot;&gt;&lt;a href=&quot;#2-1感知机模型&quot; class=&quot;headerlink&quot; title=&quot;2.1感知机模型&quot;&gt;&lt;/a&gt;2.1感知机模型&lt;/h3&gt;
    
    </summary>
    
      <category term="是时候学点人工智能了" scheme="https://lizhangyan.github.io/categories/%E6%98%AF%E6%97%B6%E5%80%99%E5%AD%A6%E7%82%B9%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BA%86/"/>
    
    
      <category term="统计学习" scheme="https://lizhangyan.github.io/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="机器学习" scheme="https://lizhangyan.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>[原]统计学习方法笔记（一）</title>
    <link href="https://lizhangyan.github.io/2017/05/24/%E5%8E%9F-%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://lizhangyan.github.io/2017/05/24/原-统计学习方法笔记（一）/</id>
    <published>2017-05-24T02:45:28.000Z</published>
    <updated>2017-12-13T09:38:02.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="统计学习方法"><a href="#统计学习方法" class="headerlink" title="统计学习方法"></a>统计学习方法</h1><p>大部分内容总结自<strong>李航</strong>博士的<strong><em>统计学习方法</em></strong><br><a id="more"></a></p><p>课件：<a href="http://download.csdn.net/detail/u012610276/9850578" target="_blank" rel="noopener">统计学习方法课件</a></p><h2 id="第一章-统计学习方法概论"><a href="#第一章-统计学习方法概论" class="headerlink" title="第一章 统计学习方法概论"></a>第一章 统计学习方法概论</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;统计学习方法&quot;&gt;&lt;a href=&quot;#统计学习方法&quot; class=&quot;headerlink&quot; title=&quot;统计学习方法&quot;&gt;&lt;/a&gt;统计学习方法&lt;/h1&gt;&lt;p&gt;大部分内容总结自&lt;strong&gt;李航&lt;/strong&gt;博士的&lt;strong&gt;&lt;em&gt;统计学习方法&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="是时候学点人工智能了" scheme="https://lizhangyan.github.io/categories/%E6%98%AF%E6%97%B6%E5%80%99%E5%AD%A6%E7%82%B9%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%BA%86/"/>
    
    
      <category term="统计学习" scheme="https://lizhangyan.github.io/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="机器学习" scheme="https://lizhangyan.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>[原]JSP在Eclipse中调用.class</title>
    <link href="https://lizhangyan.github.io/2014/11/01/%E5%8E%9F-JSP%E5%9C%A8Eclipse%E4%B8%AD%E8%B0%83%E7%94%A8-class/"/>
    <id>https://lizhangyan.github.io/2014/11/01/原-JSP在Eclipse中调用-class/</id>
    <published>2014-11-01T13:17:47.000Z</published>
    <updated>2017-12-13T10:32:56.685Z</updated>
    
    <content type="html"><![CDATA[<p>这两天在学习Jsp，在调用.class的时候总是报错，最后才发现再写.Java时必须要用包名，然后再用<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page import=test.TestBean%&gt;调用</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天在学习Jsp，在调用.class的时候总是报错，最后才发现再写.Java时必须要用包名，然后再用&lt;br&gt;
    
    </summary>
    
      <category term="我怎么会这些杂七杂八的东西" scheme="https://lizhangyan.github.io/categories/%E6%88%91%E6%80%8E%E4%B9%88%E4%BC%9A%E8%BF%99%E4%BA%9B%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
    
    
      <category term="java" scheme="https://lizhangyan.github.io/tags/java/"/>
    
      <category term="servlet" scheme="https://lizhangyan.github.io/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>[原]C#连接SQLServer</title>
    <link href="https://lizhangyan.github.io/2014/04/19/%E5%8E%9F-C-%E8%BF%9E%E6%8E%A5SQLServer/"/>
    <id>https://lizhangyan.github.io/2014/04/19/原-C-连接SQLServer/</id>
    <published>2014-04-18T16:07:16.000Z</published>
    <updated>2017-12-13T10:32:13.909Z</updated>
    
    <content type="html"><![CDATA[<p>首先你的头文件里必须引用<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">using System.Data;</span><br><span class="line">using System.Data.SqlClient;</span><br></pre></td></tr></table></figure><p>然后是连接数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SqlConnection con = new SqlConnection(Data Source=LZY; Initial Catalog=Student; Integrated Security=true)</span><br></pre></td></tr></table></figure></p><p>其中Data Source后面给的是服务器名，我用的是本地数据库</p><p>Initial Catalog后面是数据库名；</p><p>Integrated Secutity后面如果为“true”或者“SSPI”，表示指定windows 身份验证，如果为“false”，表示不指定Windows身份验证；</p><p>然后是打开数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">con.Open();</span><br><span class="line">MessageBox.Show(数据库 + con.ServerVersion + con.State)</span><br></pre></td></tr></table></figure></p><p>ServerVersion好像是可以看你数据库的下图蓝色圈里的数字，不知道是什么东西，State则是数据库的状态：打开还是关闭</p><p><img src="http://img.blog.csdn.net/20140419000525593?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjYxMDI3Ng==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>附上一个完整代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.ComponentModel;</span><br><span class="line">using System.Data;</span><br><span class="line">using System.Drawing;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using System.Windows.Forms;</span><br><span class="line">using System.Data.SqlClient;</span><br><span class="line"></span><br><span class="line">namespace SQL</span><br><span class="line">&#123;</span><br><span class="line">    public partial class OpenSQL : Form</span><br><span class="line">    &#123;</span><br><span class="line">        public OpenSQL()</span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void Form1_Load(object sender, EventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void button1_Click(object sender, EventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            using (SqlConnection con = new SqlConnection(Data Source=LZY; Initial Catalog=Student; Integrated Security=true))</span><br><span class="line">            &#123;</span><br><span class="line">                try</span><br><span class="line">                &#123;</span><br><span class="line">                    con.Open();</span><br><span class="line">                    MessageBox.Show(数据库+con.ServerVersion+con.State);&lt;/pre&gt;&lt;pre code_snippet_id=&quot;300627&quot; snippet_file_name=&quot;blog_20140419_5_992152&quot;  class=&quot;csharp&quot; name=&quot;code&quot;&gt;                &#125;</span><br><span class="line">                catch (Exception ex)</span><br><span class="line">                &#123;</span><br><span class="line">                    MessageBox.Show(ex.ToString());</span><br><span class="line">                &#125;</span><br><span class="line">                finally</span><br><span class="line">                &#123;</span><br><span class="line">                      con.Close();</span><br><span class="line">                      MessageBox.Show(数据库+ con.State);</span><br><span class="line">                      Application.Exit();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先你的头文件里必须引用&lt;br&gt;
    
    </summary>
    
      <category term="我怎么会这些杂七杂八的东西" scheme="https://lizhangyan.github.io/categories/%E6%88%91%E6%80%8E%E4%B9%88%E4%BC%9A%E8%BF%99%E4%BA%9B%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
    
    
      <category term="SQL" scheme="https://lizhangyan.github.io/tags/SQL/"/>
    
      <category term="C#" scheme="https://lizhangyan.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>[原]括号匹配</title>
    <link href="https://lizhangyan.github.io/2014/04/13/%E5%8E%9F-%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/"/>
    <id>https://lizhangyan.github.io/2014/04/13/原-括号匹配/</id>
    <published>2014-04-13T07:58:42.000Z</published>
    <updated>2017-12-13T10:36:42.883Z</updated>
    
    <content type="html"><![CDATA[<blockquote><blockquote><p>括号匹配算法</p></blockquote></blockquote><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#define MAX 100</span><br><span class="line">#define ADD 10</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">char *top;</span><br><span class="line">char *base;</span><br><span class="line">int stacksize;</span><br><span class="line">&#125;Stack;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void CreatStack(Stack *S)</span><br><span class="line">&#123;</span><br><span class="line">S-&amp;gt;base=(char *)malloc(MAX*sizeof(char));</span><br><span class="line">if(!S)</span><br><span class="line">&#123;</span><br><span class="line">printf(&amp;quot;申请失败\n&amp;quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">S-&amp;gt;top=S-&amp;gt;base;</span><br><span class="line">S-&amp;gt;stacksize=MAX;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Push(Stack *S, char ch)</span><br><span class="line">&#123;</span><br><span class="line">char *newbase;</span><br><span class="line">if(S-&amp;gt;top-S-&amp;gt;base&amp;gt;=S-&amp;gt;stacksize)</span><br><span class="line">&#123;</span><br><span class="line">newbase=(char*)realloc(S-&amp;gt;base, (S-&amp;gt;stacksize+ADD)*sizeof(char));</span><br><span class="line">if(!newbase)</span><br><span class="line">&#123;</span><br><span class="line">printf(&amp;quot;申请失败\n&amp;quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">S-&amp;gt;top=S-&amp;gt;base+S-&amp;gt;stacksize;</span><br><span class="line">S-&amp;gt;stacksize+=ADD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">*(S-&amp;gt;top++)=ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">char Pop(Stack *S)</span><br><span class="line">&#123;</span><br><span class="line">return *(S-&amp;gt;top-1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Delete(Stack *S)</span><br><span class="line">&#123;</span><br><span class="line">S-&amp;gt;top--;</span><br><span class="line">&#125;</span><br><span class="line">int cmp(Stack *S)</span><br><span class="line">&#123;</span><br><span class="line">char ch;</span><br><span class="line">int tag=1;</span><br><span class="line">scanf(&amp;quot;%c&amp;quot;, &amp;amp;ch);</span><br><span class="line">while(ch!=&apos;#&apos;&amp;amp;&amp;amp;tag)</span><br><span class="line">&#123;</span><br><span class="line">switch(ch)</span><br><span class="line">&#123;</span><br><span class="line">case &apos;(&apos;:</span><br><span class="line">case &apos;[&apos;:</span><br><span class="line">case &apos;&#123;&apos;:</span><br><span class="line">Push(S,ch);</span><br><span class="line">break;</span><br><span class="line">case &apos;)&apos;:</span><br><span class="line">if(Pop(S)==&apos;(&apos;)</span><br><span class="line">&#123;</span><br><span class="line">Delete(S); break;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">tag=0;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case &apos;]&apos;:</span><br><span class="line">if(Pop(S)==&apos;[&apos;)</span><br><span class="line">&#123;</span><br><span class="line">Delete(S);break;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">tag=0;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">case &apos;&#125;&apos;:</span><br><span class="line">if(Pop(S)==&apos;&#123;&apos;)</span><br><span class="line">&#123;</span><br><span class="line">Delete(S); break;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">tag=0;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">scanf(&amp;quot;%c&amp;quot;, &amp;amp;ch);</span><br><span class="line">&#125;</span><br><span class="line">return tag;</span><br><span class="line">&#125;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">int tag;</span><br><span class="line">Stack S;</span><br><span class="line">CreatStack(&amp;amp;S);</span><br><span class="line">printf(&amp;quot;括号匹配，以#结束\n&amp;quot;);</span><br><span class="line">tag=cmp(&amp;amp;S);</span><br><span class="line">if(tag)</span><br><span class="line">&#123;</span><br><span class="line">printf(&amp;quot;匹配成功\n&amp;quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">printf(&amp;quot;匹配失败\n&amp;quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学完数据结构的括号匹配，发上源代码，请大家多多指教啊</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;括号匹配算法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="是时候学点算法了" scheme="https://lizhangyan.github.io/categories/%E6%98%AF%E6%97%B6%E5%80%99%E5%AD%A6%E7%82%B9%E7%AE%97%E6%B3%95%E4%BA%86/"/>
    
    
      <category term="算法" scheme="https://lizhangyan.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
